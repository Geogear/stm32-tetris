
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f4  080056f4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080056fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  2000001c  08005718  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08005718  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aef7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f62  00000000  00000000  0002af43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017016  00000000  00000000  0002e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d38e  00000000  00000000  0004529e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009105c  00000000  00000000  0005262c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3688  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f0  00000000  00000000  000e36d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004900 	.word	0x08004900

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08004900 	.word	0x08004900

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 fd0f 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f8db 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9ef 	bl	80008cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ee:	f000 f99f 	bl	8000830 <MX_I2C1_Init>
  MX_DMA_Init();
 80004f2:	f000 f9cb 	bl	800088c <MX_DMA_Init>
  MX_ADC1_Init();
 80004f6:	f000 f93b 	bl	8000770 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(SSD1306_Init () == 0){
 80004fa:	f000 fa4d 	bl	8000998 <SSD1306_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d11a      	bne.n	800053a <main+0x5e>
		for(uint8_t i = 0; i < 10; ++i){
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e014      	b.n	8000534 <main+0x58>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	485a      	ldr	r0, [pc, #360]	; (800067c <main+0x1a0>)
 8000512:	f002 ff95 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_Delay (100);
 8000516:	2064      	movs	r0, #100	; 0x64
 8000518:	f001 fd66 	bl	8001fe8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	4856      	ldr	r0, [pc, #344]	; (800067c <main+0x1a0>)
 8000524:	f002 ff8c 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_Delay (100);
 8000528:	2064      	movs	r0, #100	; 0x64
 800052a:	f001 fd5d 	bl	8001fe8 <HAL_Delay>
		for(uint8_t i = 0; i < 10; ++i){
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	3301      	adds	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b09      	cmp	r3, #9
 8000538:	d9e7      	bls.n	800050a <main+0x2e>
		}
	}
	  rng_seed(HAL_GetTick());
 800053a:	f001 fd49 	bl	8001fd0 <HAL_GetTick>
 800053e:	4603      	mov	r3, r0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fb73 	bl	8001c2c <rng_seed>
	  HAL_StatusTypeDef status = HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8000546:	2202      	movs	r2, #2
 8000548:	494d      	ldr	r1, [pc, #308]	; (8000680 <main+0x1a4>)
 800054a:	484e      	ldr	r0, [pc, #312]	; (8000684 <main+0x1a8>)
 800054c:	f001 fdb4 	bl	80020b8 <HAL_ADC_Start_DMA>
 8000550:	4603      	mov	r3, r0
 8000552:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  uint32_t last_input_time = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
	  uint32_t input_interval = 250;
 8000558:	23fa      	movs	r3, #250	; 0xfa
 800055a:	603b      	str	r3, [r7, #0]
	  enum GAME_STATE cur_state = START;
 800055c:	2300      	movs	r3, #0
 800055e:	71fb      	strb	r3, [r7, #7]
	  enum SM_MOVE move;
	  static char score_buf[12] = {0};
  while (1)
  {
	  move = NO_INPUT;
 8000560:	2304      	movs	r3, #4
 8000562:	71bb      	strb	r3, [r7, #6]

	  if(cur_state == START){
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d11e      	bne.n	80005a8 <main+0xcc>
		  SSD1306_GotoXY (10,10); // goto 10, 10
 800056a:	210a      	movs	r1, #10
 800056c:	200a      	movs	r0, #10
 800056e:	f000 fbd7 	bl	8000d20 <SSD1306_GotoXY>
		  SSD1306_Puts ("MINI TETRIS", &Font_11x18, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	4944      	ldr	r1, [pc, #272]	; (8000688 <main+0x1ac>)
 8000576:	4845      	ldr	r0, [pc, #276]	; (800068c <main+0x1b0>)
 8000578:	f000 fc68 	bl	8000e4c <SSD1306_Puts>
		  SSD1306_GotoXY (10, 30);
 800057c:	211e      	movs	r1, #30
 800057e:	200a      	movs	r0, #10
 8000580:	f000 fbce 	bl	8000d20 <SSD1306_GotoXY>
		  SSD1306_Puts ("STARTS!!", &Font_11x18, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	4940      	ldr	r1, [pc, #256]	; (8000688 <main+0x1ac>)
 8000588:	4841      	ldr	r0, [pc, #260]	; (8000690 <main+0x1b4>)
 800058a:	f000 fc5f 	bl	8000e4c <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen*/
 800058e:	f000 fb19 	bl	8000bc4 <SSD1306_UpdateScreen>
		  HAL_Delay (2000);
 8000592:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000596:	f001 fd27 	bl	8001fe8 <HAL_Delay>
		  SSD1306_Clear();
 800059a:	f000 fc7c 	bl	8000e96 <SSD1306_Clear>
		  init_game();
 800059e:	f001 fc5d 	bl	8001e5c <init_game>
		  cur_state = RUNNING;
 80005a2:	2301      	movs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
 80005a6:	e7db      	b.n	8000560 <main+0x84>
	  }else if(cur_state == RUNNING){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d130      	bne.n	8000610 <main+0x134>
		  if(last_input_time + input_interval < HAL_GetTick()){
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	18d4      	adds	r4, r2, r3
 80005b4:	f001 fd0c 	bl	8001fd0 <HAL_GetTick>
 80005b8:	4603      	mov	r3, r0
 80005ba:	429c      	cmp	r4, r3
 80005bc:	d221      	bcs.n	8000602 <main+0x126>
			  last_input_time = HAL_GetTick();
 80005be:	f001 fd07 	bl	8001fd0 <HAL_GetTick>
 80005c2:	60b8      	str	r0, [r7, #8]
			  if(VR[1] > 3900){
 80005c4:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <main+0x1a4>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f640 723c 	movw	r2, #3900	; 0xf3c
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d902      	bls.n	80005d6 <main+0xfa>
				  move = ROTATE;
 80005d0:	2303      	movs	r3, #3
 80005d2:	71bb      	strb	r3, [r7, #6]
 80005d4:	e015      	b.n	8000602 <main+0x126>
			  }else if(VR[1] < 200){
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <main+0x1a4>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2bc7      	cmp	r3, #199	; 0xc7
 80005dc:	d802      	bhi.n	80005e4 <main+0x108>
				  move = DOWN;
 80005de:	2302      	movs	r3, #2
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	e00e      	b.n	8000602 <main+0x126>
			  }else if(VR[0] > 3900){
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <main+0x1a4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f640 723c 	movw	r2, #3900	; 0xf3c
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d902      	bls.n	80005f6 <main+0x11a>
				  move = LEFT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	71bb      	strb	r3, [r7, #6]
 80005f4:	e005      	b.n	8000602 <main+0x126>
			  }else if(VR[0] < 200){
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <main+0x1a4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2bc7      	cmp	r3, #199	; 0xc7
 80005fc:	d801      	bhi.n	8000602 <main+0x126>
				  move = RIGHT;
 80005fe:	2301      	movs	r3, #1
 8000600:	71bb      	strb	r3, [r7, #6]
			  }
		  }
		  cur_state = game_iteration(move);
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fb97 	bl	8001d38 <game_iteration>
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e7a7      	b.n	8000560 <main+0x84>
	  }else{
		  cur_state = START;
 8000610:	2300      	movs	r3, #0
 8000612:	71fb      	strb	r3, [r7, #7]
		  SSD1306_GotoXY (10,10); // goto 10, 10
 8000614:	210a      	movs	r1, #10
 8000616:	200a      	movs	r0, #10
 8000618:	f000 fb82 	bl	8000d20 <SSD1306_GotoXY>
		  SSD1306_Puts ("GAME OVER!", &Font_11x18, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	491a      	ldr	r1, [pc, #104]	; (8000688 <main+0x1ac>)
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <main+0x1b8>)
 8000622:	f000 fc13 	bl	8000e4c <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen*/
 8000626:	f000 facd 	bl	8000bc4 <SSD1306_UpdateScreen>
		  HAL_Delay (2000);
 800062a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800062e:	f001 fcdb 	bl	8001fe8 <HAL_Delay>
		  SSD1306_Clear();
 8000632:	f000 fc30 	bl	8000e96 <SSD1306_Clear>
		  SSD1306_GotoXY (10,10); // goto 10, 10
 8000636:	210a      	movs	r1, #10
 8000638:	200a      	movs	r0, #10
 800063a:	f000 fb71 	bl	8000d20 <SSD1306_GotoXY>
		  SSD1306_Puts ("YOUR SCORE", &Font_11x18, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4911      	ldr	r1, [pc, #68]	; (8000688 <main+0x1ac>)
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <main+0x1bc>)
 8000644:	f000 fc02 	bl	8000e4c <SSD1306_Puts>
		  SSD1306_GotoXY (10, 30);
 8000648:	211e      	movs	r1, #30
 800064a:	200a      	movs	r0, #10
 800064c:	f000 fb68 	bl	8000d20 <SSD1306_GotoXY>
		  itoa(get_score(), score_buf, 11);
 8000650:	f001 fbf8 	bl	8001e44 <get_score>
 8000654:	4603      	mov	r3, r0
 8000656:	220b      	movs	r2, #11
 8000658:	4910      	ldr	r1, [pc, #64]	; (800069c <main+0x1c0>)
 800065a:	4618      	mov	r0, r3
 800065c:	f004 f904 	bl	8004868 <itoa>
		  SSD1306_Puts (score_buf, &Font_11x18, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	4909      	ldr	r1, [pc, #36]	; (8000688 <main+0x1ac>)
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <main+0x1c0>)
 8000666:	f000 fbf1 	bl	8000e4c <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen*/
 800066a:	f000 faab 	bl	8000bc4 <SSD1306_UpdateScreen>
		  HAL_Delay (4000);
 800066e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000672:	f001 fcb9 	bl	8001fe8 <HAL_Delay>
		  SSD1306_Clear();
 8000676:	f000 fc0e 	bl	8000e96 <SSD1306_Clear>
	  move = NO_INPUT;
 800067a:	e771      	b.n	8000560 <main+0x84>
 800067c:	40020800 	.word	0x40020800
 8000680:	200004f4 	.word	0x200004f4
 8000684:	200004fc 	.word	0x200004fc
 8000688:	20000000 	.word	0x20000000
 800068c:	08004918 	.word	0x08004918
 8000690:	08004924 	.word	0x08004924
 8000694:	08004930 	.word	0x08004930
 8000698:	0800493c 	.word	0x0800493c
 800069c:	20000038 	.word	0x20000038

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 f8dc 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xc8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a26      	ldr	r2, [pc, #152]	; (8000768 <SystemClock_Config+0xc8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <SystemClock_Config+0xc8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <SystemClock_Config+0xcc>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <SystemClock_Config+0xcc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000710:	230c      	movs	r3, #12
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000714:	2360      	movs	r3, #96	; 0x60
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f003 fc1f 	bl	8003f68 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 f92c 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2103      	movs	r1, #3
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fe81 	bl	8004458 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800075c:	f000 f916 	bl	800098c <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <MX_ADC1_Init+0xb4>)
 8000784:	4a28      	ldr	r2, [pc, #160]	; (8000828 <MX_ADC1_Init+0xb8>)
 8000786:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_ADC1_Init+0xb4>)
 800078a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_ADC1_Init+0xb4>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_ADC1_Init+0xb4>)
 8000798:	2201      	movs	r2, #1
 800079a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_ADC1_Init+0xb4>)
 800079e:	2201      	movs	r2, #1
 80007a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_ADC1_Init+0xbc>)
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007be:	2202      	movs	r2, #2
 80007c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d0:	4814      	ldr	r0, [pc, #80]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007d2:	f001 fc2d 	bl	8002030 <HAL_ADC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f8d6 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80007e8:	2306      	movs	r3, #6
 80007ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_ADC1_Init+0xb4>)
 80007f2:	f001 fd6f 	bl	80022d4 <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 f8c6 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000800:	2302      	movs	r3, #2
 8000802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_ADC1_Init+0xb4>)
 800080e:	f001 fd61 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000818:	f000 f8b8 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200004fc 	.word	0x200004fc
 8000828:	40012000 	.word	0x40012000
 800082c:	0f000001 	.word	0x0f000001

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f002 fe01 	bl	8003474 <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f888 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200004a0 	.word	0x200004a0
 8000884:	40005400 	.word	0x40005400
 8000888:	00061a80 	.word	0x00061a80

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA_Init+0x3c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <MX_DMA_Init+0x3c>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_DMA_Init+0x3c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2038      	movs	r0, #56	; 0x38
 80008b4:	f002 f899 	bl	80029ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b8:	2038      	movs	r0, #56	; 0x38
 80008ba:	f002 f8b2 	bl	8002a22 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a26      	ldr	r2, [pc, #152]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_GPIO_Init+0xb8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_GPIO_Init+0xb8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0xbc>)
 800095a:	f002 fd71 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_GPIO_Init+0xbc>)
 8000978:	f002 fbde 	bl	8003138 <HAL_GPIO_Init>

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020800 	.word	0x40020800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800099e:	f000 fa83 	bl	8000ea8 <ssd1306_I2C_Init>

	/* TODO I've added this. */
	for(uint16_t adr = 0; adr <= 255; ++adr){
 80009a2:	2300      	movs	r3, #0
 80009a4:	81fb      	strh	r3, [r7, #14]
 80009a6:	e01b      	b.n	80009e0 <SSD1306_Init+0x48>
		HAL_StatusTypeDef ret_val = HAL_I2C_IsDeviceReady(&hi2c1, adr, 1, 20000);
 80009a8:	89f9      	ldrh	r1, [r7, #14]
 80009aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009ae:	2201      	movs	r2, #1
 80009b0:	4881      	ldr	r0, [pc, #516]	; (8000bb8 <SSD1306_Init+0x220>)
 80009b2:	f002 ffa1 	bl	80038f8 <HAL_I2C_IsDeviceReady>
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
		if(ret_val == HAL_OK){
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <SSD1306_Init+0x32>
			real_adr = adr;
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b7d      	ldr	r3, [pc, #500]	; (8000bbc <SSD1306_Init+0x224>)
 80009c6:	701a      	strb	r2, [r3, #0]
			break;
 80009c8:	e00d      	b.n	80009e6 <SSD1306_Init+0x4e>
		}
		else if(ret_val != HAL_OK && adr == 255)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <SSD1306_Init+0x42>
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	2bff      	cmp	r3, #255	; 0xff
 80009d4:	d101      	bne.n	80009da <SSD1306_Init+0x42>
			return 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e0e9      	b.n	8000bae <SSD1306_Init+0x216>
	for(uint16_t adr = 0; adr <= 255; ++adr){
 80009da:	89fb      	ldrh	r3, [r7, #14]
 80009dc:	3301      	adds	r3, #1
 80009de:	81fb      	strh	r3, [r7, #14]
 80009e0:	89fb      	ldrh	r3, [r7, #14]
 80009e2:	2bff      	cmp	r3, #255	; 0xff
 80009e4:	d9e0      	bls.n	80009a8 <SSD1306_Init+0x10>
		// Return false
		return 0;
	}*/

	/* A little delay */
	uint32_t p = 2500;
 80009e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80009ea:	60bb      	str	r3, [r7, #8]
	while(p>0)
 80009ec:	e002      	b.n	80009f4 <SSD1306_Init+0x5c>
		p--;
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
	while(p>0)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1f9      	bne.n	80009ee <SSD1306_Init+0x56>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80009fa:	4b70      	ldr	r3, [pc, #448]	; (8000bbc <SSD1306_Init+0x224>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	22ae      	movs	r2, #174	; 0xae
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 facc 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000a08:	4b6c      	ldr	r3, [pc, #432]	; (8000bbc <SSD1306_Init+0x224>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fac5 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a16:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <SSD1306_Init+0x224>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fabe 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a24:	4b65      	ldr	r3, [pc, #404]	; (8000bbc <SSD1306_Init+0x224>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	22b0      	movs	r2, #176	; 0xb0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fab7 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a32:	4b62      	ldr	r3, [pc, #392]	; (8000bbc <SSD1306_Init+0x224>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	22c8      	movs	r2, #200	; 0xc8
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fab0 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <SSD1306_Init+0x224>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 faa9 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	; (8000bbc <SSD1306_Init+0x224>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2210      	movs	r2, #16
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 faa2 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a5c:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <SSD1306_Init+0x224>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2240      	movs	r2, #64	; 0x40
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa9b 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a6a:	4b54      	ldr	r3, [pc, #336]	; (8000bbc <SSD1306_Init+0x224>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2281      	movs	r2, #129	; 0x81
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fa94 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <SSD1306_Init+0x224>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fa8d 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a86:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <SSD1306_Init+0x224>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	22a1      	movs	r2, #161	; 0xa1
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fa86 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a94:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <SSD1306_Init+0x224>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	22a6      	movs	r2, #166	; 0xa6
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fa7f 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000aa2:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <SSD1306_Init+0x224>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	22a8      	movs	r2, #168	; 0xa8
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fa78 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ab0:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <SSD1306_Init+0x224>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	223f      	movs	r2, #63	; 0x3f
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fa71 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000abe:	4b3f      	ldr	r3, [pc, #252]	; (8000bbc <SSD1306_Init+0x224>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	22a4      	movs	r2, #164	; 0xa4
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fa6a 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000acc:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <SSD1306_Init+0x224>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	22d3      	movs	r2, #211	; 0xd3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa63 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ada:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <SSD1306_Init+0x224>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa5c 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ae8:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <SSD1306_Init+0x224>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	22d5      	movs	r2, #213	; 0xd5
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fa55 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <SSD1306_Init+0x224>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	22f0      	movs	r2, #240	; 0xf0
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fa4e 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b04:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <SSD1306_Init+0x224>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	22d9      	movs	r2, #217	; 0xd9
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fa47 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <SSD1306_Init+0x224>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2222      	movs	r2, #34	; 0x22
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fa40 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <SSD1306_Init+0x224>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	22da      	movs	r2, #218	; 0xda
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fa39 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <SSD1306_Init+0x224>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2212      	movs	r2, #18
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fa32 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <SSD1306_Init+0x224>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	22db      	movs	r2, #219	; 0xdb
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fa2b 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <SSD1306_Init+0x224>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2220      	movs	r2, #32
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fa24 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <SSD1306_Init+0x224>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	228d      	movs	r2, #141	; 0x8d
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fa1d 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <SSD1306_Init+0x224>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2214      	movs	r2, #20
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fa16 	bl	8000fa0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SSD1306_Init+0x224>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	22af      	movs	r2, #175	; 0xaf
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fa0f 	bl	8000fa0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <SSD1306_Init+0x224>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	222e      	movs	r2, #46	; 0x2e
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fa08 	bl	8000fa0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 f84d 	bl	8000c30 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000b96:	f000 f815 	bl	8000bc4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <SSD1306_Init+0x228>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <SSD1306_Init+0x228>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SSD1306_Init+0x228>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000bac:	2301      	movs	r3, #1
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200004a0 	.word	0x200004a0
 8000bbc:	20000044 	.word	0x20000044
 8000bc0:	20000448 	.word	0x20000448

08000bc4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	e023      	b.n	8000c18 <SSD1306_UpdateScreen+0x54>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <SSD1306_UpdateScreen+0x64>)
 8000bd2:	7818      	ldrb	r0, [r3, #0]
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3b50      	subs	r3, #80	; 0x50
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f000 f9df 	bl	8000fa0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <SSD1306_UpdateScreen+0x64>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f9d8 	bl	8000fa0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <SSD1306_UpdateScreen+0x64>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f9d1 	bl	8000fa0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(real_adr, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SSD1306_UpdateScreen+0x64>)
 8000c00:	7818      	ldrb	r0, [r3, #0]
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	01db      	lsls	r3, r3, #7
 8000c06:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <SSD1306_UpdateScreen+0x68>)
 8000c08:	441a      	add	r2, r3
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	2140      	movs	r1, #64	; 0x40
 8000c0e:	f000 f961 	bl	8000ed4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	3301      	adds	r3, #1
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d9d8      	bls.n	8000bd0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000044 	.word	0x20000044
 8000c2c:	20000048 	.word	0x20000048

08000c30 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <SSD1306_Fill+0x14>
 8000c40:	2300      	movs	r3, #0
 8000c42:	e000      	b.n	8000c46 <SSD1306_Fill+0x16>
 8000c44:	23ff      	movs	r3, #255	; 0xff
 8000c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <SSD1306_Fill+0x2c>)
 8000c4e:	f003 fe0d 	bl	800486c <memset>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000048 	.word	0x20000048

08000c60 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	80bb      	strh	r3, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	70fb      	strb	r3, [r7, #3]
	if (
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b7f      	cmp	r3, #127	; 0x7f
 8000c76:	d848      	bhi.n	8000d0a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c78:	88bb      	ldrh	r3, [r7, #4]
 8000c7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c7c:	d845      	bhi.n	8000d0a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <SSD1306_DrawPixel+0xb8>)
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf0c      	ite	eq
 8000c8c:	2301      	moveq	r3, #1
 8000c8e:	2300      	movne	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d11a      	bne.n	8000cd0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c9a:	88fa      	ldrh	r2, [r7, #6]
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	b298      	uxth	r0, r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	01db      	lsls	r3, r3, #7
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	b25a      	sxtb	r2, r3
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b259      	sxtb	r1, r3
 8000cc0:	88fa      	ldrh	r2, [r7, #6]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	01db      	lsls	r3, r3, #7
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2c9      	uxtb	r1, r1
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000ccc:	54d1      	strb	r1, [r2, r3]
 8000cce:	e01d      	b.n	8000d0c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	b298      	uxth	r0, r3
 8000cd8:	4603      	mov	r3, r0
 8000cda:	01db      	lsls	r3, r3, #7
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	b25a      	sxtb	r2, r3
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	b259      	sxtb	r1, r3
 8000cfa:	88fa      	ldrh	r2, [r7, #6]
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	01db      	lsls	r3, r3, #7
 8000d00:	4413      	add	r3, r2
 8000d02:	b2c9      	uxtb	r1, r1
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000d06:	54d1      	strb	r1, [r2, r3]
 8000d08:	e000      	b.n	8000d0c <SSD1306_DrawPixel+0xac>
		return;
 8000d0a:	bf00      	nop
	}
}
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000448 	.word	0x20000448
 8000d1c:	20000048 	.word	0x20000048

08000d20 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	80fb      	strh	r3, [r7, #6]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SSD1306_GotoXY+0x28>)
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <SSD1306_GotoXY+0x28>)
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	8053      	strh	r3, [r2, #2]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000448 	.word	0x20000448

08000d4c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
	if (
 8000d68:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6a:	dc07      	bgt.n	8000d7c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000d6e:	885b      	ldrh	r3, [r3, #2]
 8000d70:	461a      	mov	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	785b      	ldrb	r3, [r3, #1]
 8000d76:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d78:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7a:	dd01      	ble.n	8000d80 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e05e      	b.n	8000e3e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e04b      	b.n	8000e1e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3b20      	subs	r3, #32
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	7849      	ldrb	r1, [r1, #1]
 8000d92:	fb01 f303 	mul.w	r3, r1, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	e030      	b.n	8000e0c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d010      	beq.n	8000ddc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b298      	uxth	r0, r3
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dc8:	885a      	ldrh	r2, [r3, #2]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f7ff ff43 	bl	8000c60 <SSD1306_DrawPixel>
 8000dda:	e014      	b.n	8000e06 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	b298      	uxth	r0, r3
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dea:	885a      	ldrh	r2, [r3, #2]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	b299      	uxth	r1, r3
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	f7ff ff2d 	bl	8000c60 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d3c8      	bcc.n	8000daa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	785b      	ldrb	r3, [r3, #1]
 8000e22:	461a      	mov	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d3ad      	bcc.n	8000d86 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000e2c:	881a      	ldrh	r2, [r3, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000e3a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000448 	.word	0x20000448

08000e4c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	4613      	mov	r3, r2
 8000e58:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000e5a:	e012      	b.n	8000e82 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff71 	bl	8000d4c <SSD1306_Putc>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d002      	beq.n	8000e7c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	e008      	b.n	8000e8e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1e8      	bne.n	8000e5c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fec8 	bl	8000c30 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ea0:	f7ff fe90 	bl	8000bc4 <SSD1306_UpdateScreen>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <ssd1306_I2C_Init+0x28>)
 8000eb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000eb2:	e002      	b.n	8000eba <ssd1306_I2C_Init+0x12>
		p--;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f9      	bne.n	8000eb4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	0003d090 	.word	0x0003d090

08000ed4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b0c7      	sub	sp, #284	; 0x11c
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000ee2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000ee6:	600a      	str	r2, [r1, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ef2:	4622      	mov	r2, r4
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000efa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000efe:	4602      	mov	r2, r0
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f1a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f28:	e015      	b.n	8000f56 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f2e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f32:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	441a      	add	r2, r3
 8000f3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f3e:	3301      	adds	r3, #1
 8000f40:	7811      	ldrb	r1, [r2, #0]
 8000f42:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f46:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f4a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f4c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f50:	3301      	adds	r3, #1
 8000f52:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f60:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000f64:	8812      	ldrh	r2, [r2, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d8df      	bhi.n	8000f2a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f6e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b299      	uxth	r1, r3
 8000f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	200a      	movs	r0, #10
 8000f8a:	9000      	str	r0, [sp, #0]
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <ssd1306_I2C_WriteMulti+0xc8>)
 8000f8e:	f002 fbb5 	bl	80036fc <HAL_I2C_Master_Transmit>
}
 8000f92:	bf00      	nop
 8000f94:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	200004a0 	.word	0x200004a0

08000fa0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	460b      	mov	r3, r1
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000fb6:	797b      	ldrb	r3, [r7, #5]
 8000fb8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	f107 020c 	add.w	r2, r7, #12
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <ssd1306_I2C_Write+0x38>)
 8000fca:	f002 fb97 	bl	80036fc <HAL_I2C_Master_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200004a0 	.word	0x200004a0

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_MspInit+0x4c>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d157      	bne.n	80010fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_ADC_MspInit+0xe0>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a2d      	ldr	r2, [pc, #180]	; (800110c <HAL_ADC_MspInit+0xe0>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_ADC_MspInit+0xe0>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <HAL_ADC_MspInit+0xe0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a26      	ldr	r2, [pc, #152]	; (800110c <HAL_ADC_MspInit+0xe0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <HAL_ADC_MspInit+0xe0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001086:	2306      	movs	r3, #6
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <HAL_ADC_MspInit+0xe4>)
 800109a:	f002 f84d 	bl	8003138 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_ADC_MspInit+0xec>)
 80010a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010e4:	f001 fcb8 	bl	8002a58 <HAL_DMA_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010ee:	f7ff fc4d 	bl	800098c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_ADC_MspInit+0xe8>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40012000 	.word	0x40012000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000
 8001114:	20000544 	.word	0x20000544
 8001118:	40026410 	.word	0x40026410

0800111c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_I2C_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12b      	bne.n	8001196 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115a:	23c0      	movs	r3, #192	; 0xc0
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116a:	2304      	movs	r3, #4
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <HAL_I2C_MspInit+0x8c>)
 8001176:	f001 ffdf 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 fed6 	bl	8001fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <DMA2_Stream0_IRQHandler+0x10>)
 8001206:	f001 fd2d 	bl	8002c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000544 	.word	0x20000544

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <tetris_set>:
static uint32_t rng_state = 0x31;
static uint32_t last_time = 0;
static uint32_t interval = 500;
static uint32_t score = 0;

static inline void tetris_set(uint8_t y, uint8_t x){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	460a      	mov	r2, r1
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	4613      	mov	r3, r2
 8001246:	71bb      	strb	r3, [r7, #6]
	map[y] = map[y] ^ (0x1 << x);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <tetris_set+0x40>)
 800124c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001250:	b21a      	sxth	r2, r3
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	b21b      	sxth	r3, r3
 800125c:	4053      	eors	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	b291      	uxth	r1, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <tetris_set+0x40>)
 8001266:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000450 	.word	0x20000450

0800127c <tetris_get>:

static inline uint8_t tetris_get(uint8_t y, uint8_t x){
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	460a      	mov	r2, r1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
	return (map[y] >> x) & 0x1;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <tetris_get+0x34>)
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	461a      	mov	r2, r3
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	fa42 f303 	asr.w	r3, r2, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	20000450 	.word	0x20000450

080012b4 <sm_bottom_hits>:

static void sm_get_borders(uint8_t* y, uint8_t* x_left, uint8_t* x_right){
	//TODO
}

static uint8_t sm_bottom_hits(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
		}
	}

	return hits;*/

	uint8_t bottom_y = 100;
 80012ba:	2364      	movs	r3, #100	; 0x64
 80012bc:	71fb      	strb	r3, [r7, #7]
	if(sm_cur.row4 != 0){
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <sm_bottom_hits+0x10c>)
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	f023 030f 	bic.w	r3, r3, #15
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <sm_bottom_hits+0x1e>
		bottom_y = 3;
 80012cc:	2303      	movs	r3, #3
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	e015      	b.n	80012fe <sm_bottom_hits+0x4a>
	}else if(sm_cur.row3 != 0){
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <sm_bottom_hits+0x10c>)
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <sm_bottom_hits+0x32>
		bottom_y = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	e00b      	b.n	80012fe <sm_bottom_hits+0x4a>
	}else if(sm_cur.row2 != 0){
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <sm_bottom_hits+0x10c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	f023 030f 	bic.w	r3, r3, #15
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <sm_bottom_hits+0x46>
		bottom_y = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	e001      	b.n	80012fe <sm_bottom_hits+0x4a>
	}else{
		bottom_y = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
	}

	if(sm_cur_y + bottom_y == TETRIS_ROW-1)
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <sm_bottom_hits+0x110>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4413      	add	r3, r2
 8001308:	2b1f      	cmp	r3, #31
 800130a:	d101      	bne.n	8001310 <sm_bottom_hits+0x5c>
		return 1;
 800130c:	2301      	movs	r3, #1
 800130e:	e053      	b.n	80013b8 <sm_bottom_hits+0x104>

	uint8_t blocked = 0, pixel_below = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	71bb      	strb	r3, [r7, #6]
 8001314:	2300      	movs	r3, #0
 8001316:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < 4; ++i){
 8001318:	2300      	movs	r3, #0
 800131a:	713b      	strb	r3, [r7, #4]
 800131c:	e046      	b.n	80013ac <sm_bottom_hits+0xf8>
		for(uint8_t j = 0; j < 4; ++j){
 800131e:	2300      	movs	r3, #0
 8001320:	70fb      	strb	r3, [r7, #3]
 8001322:	e03a      	b.n	800139a <sm_bottom_hits+0xe6>
			uint8_t bit = sm_get(&sm_cur, i ,j);
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	793b      	ldrb	r3, [r7, #4]
 8001328:	4619      	mov	r1, r3
 800132a:	4825      	ldr	r0, [pc, #148]	; (80013c0 <sm_bottom_hits+0x10c>)
 800132c:	f000 f97c 	bl	8001628 <sm_get>
 8001330:	4603      	mov	r3, r0
 8001332:	70bb      	strb	r3, [r7, #2]
			if(bit && i != 3){
 8001334:	78bb      	ldrb	r3, [r7, #2]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <sm_bottom_hits+0xa0>
 800133a:	793b      	ldrb	r3, [r7, #4]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d009      	beq.n	8001354 <sm_bottom_hits+0xa0>
				pixel_below = sm_get(&sm_cur, i+1 ,j);
 8001340:	793b      	ldrb	r3, [r7, #4]
 8001342:	3301      	adds	r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	4619      	mov	r1, r3
 800134a:	481d      	ldr	r0, [pc, #116]	; (80013c0 <sm_bottom_hits+0x10c>)
 800134c:	f000 f96c 	bl	8001628 <sm_get>
 8001350:	4603      	mov	r3, r0
 8001352:	717b      	strb	r3, [r7, #5]
			}
			if(bit && (i == 3 || !pixel_below)){
 8001354:	78bb      	ldrb	r3, [r7, #2]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d01c      	beq.n	8001394 <sm_bottom_hits+0xe0>
 800135a:	793b      	ldrb	r3, [r7, #4]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d002      	beq.n	8001366 <sm_bottom_hits+0xb2>
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <sm_bottom_hits+0xe0>
				uint8_t pos_x = sm_cur_x + j;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <sm_bottom_hits+0x114>)
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	4413      	add	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
				if(tetris_get(sm_cur_y + i + 1, pos_x)){
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <sm_bottom_hits+0x110>)
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	b2db      	uxtb	r3, r3
 800137a:	3301      	adds	r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	787a      	ldrb	r2, [r7, #1]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff7a 	bl	800127c <tetris_get>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <sm_bottom_hits+0xe0>
					blocked = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	71bb      	strb	r3, [r7, #6]
					break;
 8001392:	e005      	b.n	80013a0 <sm_bottom_hits+0xec>
		for(uint8_t j = 0; j < 4; ++j){
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	3301      	adds	r3, #1
 8001398:	70fb      	strb	r3, [r7, #3]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d9c1      	bls.n	8001324 <sm_bottom_hits+0x70>
				}
			}
		}
		if(blocked)
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <sm_bottom_hits+0x100>
	for(uint8_t i = 0; i < 4; ++i){
 80013a6:	793b      	ldrb	r3, [r7, #4]
 80013a8:	3301      	adds	r3, #1
 80013aa:	713b      	strb	r3, [r7, #4]
 80013ac:	793b      	ldrb	r3, [r7, #4]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9b5      	bls.n	800131e <sm_bottom_hits+0x6a>
 80013b2:	e000      	b.n	80013b6 <sm_bottom_hits+0x102>
			break;
 80013b4:	bf00      	nop
	}
	return blocked;
 80013b6:	79bb      	ldrb	r3, [r7, #6]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000490 	.word	0x20000490
 80013c4:	20000492 	.word	0x20000492
 80013c8:	20000493 	.word	0x20000493

080013cc <sm_set_shape>:

void sm_set_shape(union shape_map* sm, enum SHAPE shape, uint8_t take_mirror){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
 80013d8:	4613      	mov	r3, r2
 80013da:	70bb      	strb	r3, [r7, #2]
	sm->val = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	801a      	strh	r2, [r3, #0]
	switch(shape){
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d871      	bhi.n	80014cc <sm_set_shape+0x100>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <sm_set_shape+0x24>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001405 	.word	0x08001405
 80013f4:	0800142f 	.word	0x0800142f
 80013f8:	0800144f 	.word	0x0800144f
 80013fc:	08001479 	.word	0x08001479
 8001400:	080014a3 	.word	0x080014a3
		case SQUARE:
			sm_set(sm, 0, 0); sm_set(sm, 0, 1); // first row
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f891 	bl	8001530 <sm_set>
 800140e:	2201      	movs	r2, #1
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f88c 	bl	8001530 <sm_set>
			sm_set(sm, 1, 0); sm_set(sm, 1, 1); // second row
 8001418:	2200      	movs	r2, #0
 800141a:	2101      	movs	r1, #1
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f887 	bl	8001530 <sm_set>
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f882 	bl	8001530 <sm_set>
			break;
 800142c:	e04e      	b.n	80014cc <sm_set_shape+0x100>
		case ROD:
			for(uint8_t i = 0; i < 4; ++i)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e008      	b.n	8001446 <sm_set_shape+0x7a>
				sm_set(sm, i, 0); // always at first column and go down the rows
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f878 	bl	8001530 <sm_set>
			for(uint8_t i = 0; i < 4; ++i)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d9f3      	bls.n	8001434 <sm_set_shape+0x68>
			break;
 800144c:	e03e      	b.n	80014cc <sm_set_shape+0x100>
		case Z_BLOCK:
				sm_set(sm, 0, 0); sm_set(sm, 0, 1);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f86c 	bl	8001530 <sm_set>
 8001458:	2201      	movs	r2, #1
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f867 	bl	8001530 <sm_set>
				sm_set(sm, 1, 1); sm_set(sm, 1, 2);
 8001462:	2201      	movs	r2, #1
 8001464:	2101      	movs	r1, #1
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f862 	bl	8001530 <sm_set>
 800146c:	2202      	movs	r2, #2
 800146e:	2101      	movs	r1, #1
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f85d 	bl	8001530 <sm_set>
			break;
 8001476:	e029      	b.n	80014cc <sm_set_shape+0x100>
		case L_BLOCK:
			for(uint8_t i = 0; i < 4; ++i)
 8001478:	2300      	movs	r3, #0
 800147a:	73bb      	strb	r3, [r7, #14]
 800147c:	e008      	b.n	8001490 <sm_set_shape+0xc4>
				sm_set(sm, i, 0);
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f853 	bl	8001530 <sm_set>
			for(uint8_t i = 0; i < 4; ++i)
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d9f3      	bls.n	800147e <sm_set_shape+0xb2>
			sm_set(sm, 3, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	2103      	movs	r1, #3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f848 	bl	8001530 <sm_set>
			break;
 80014a0:	e014      	b.n	80014cc <sm_set_shape+0x100>
		case T_BLOCK:
			for(uint8_t i = 0; i < 3; ++i)
 80014a2:	2300      	movs	r3, #0
 80014a4:	737b      	strb	r3, [r7, #13]
 80014a6:	e008      	b.n	80014ba <sm_set_shape+0xee>
				sm_set(sm, 0, i); // fill the first 3 colum on the first row
 80014a8:	7b7b      	ldrb	r3, [r7, #13]
 80014aa:	461a      	mov	r2, r3
 80014ac:	2100      	movs	r1, #0
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f83e 	bl	8001530 <sm_set>
			for(uint8_t i = 0; i < 3; ++i)
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	3301      	adds	r3, #1
 80014b8:	737b      	strb	r3, [r7, #13]
 80014ba:	7b7b      	ldrb	r3, [r7, #13]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d9f3      	bls.n	80014a8 <sm_set_shape+0xdc>
			sm_set(sm, 1, 1);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2101      	movs	r1, #1
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f833 	bl	8001530 <sm_set>
			break;
 80014ca:	bf00      	nop
	}

	if(take_mirror){
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d02a      	beq.n	8001528 <sm_set_shape+0x15c>
		union shape_map take_inverse;
		take_inverse.val = sm->val;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	813b      	strh	r3, [r7, #8]
		sm->val = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < 4; ++i){
 80014de:	2300      	movs	r3, #0
 80014e0:	733b      	strb	r3, [r7, #12]
 80014e2:	e01e      	b.n	8001522 <sm_set_shape+0x156>
			for(uint8_t j = 0; j < 4; ++j){
 80014e4:	2300      	movs	r3, #0
 80014e6:	72fb      	strb	r3, [r7, #11]
 80014e8:	e015      	b.n	8001516 <sm_set_shape+0x14a>
				// If there is a set pixel value on the coord.
				// Set y mirrored of that coord.
				if(sm_get(&take_inverse, i, j)){
 80014ea:	7afa      	ldrb	r2, [r7, #11]
 80014ec:	7b39      	ldrb	r1, [r7, #12]
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f898 	bl	8001628 <sm_get>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <sm_set_shape+0x144>
					sm_set(sm, i, 3-j);
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	f1c3 0303 	rsb	r3, r3, #3
 8001504:	b2da      	uxtb	r2, r3
 8001506:	7b3b      	ldrb	r3, [r7, #12]
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f810 	bl	8001530 <sm_set>
			for(uint8_t j = 0; j < 4; ++j){
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	3301      	adds	r3, #1
 8001514:	72fb      	strb	r3, [r7, #11]
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d9e6      	bls.n	80014ea <sm_set_shape+0x11e>
		for(uint8_t i = 0; i < 4; ++i){
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	733b      	strb	r3, [r7, #12]
 8001522:	7b3b      	ldrb	r3, [r7, #12]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d9dd      	bls.n	80014e4 <sm_set_shape+0x118>
				}
			}
		}
	}
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <sm_set>:

// 4x4 sm.
void sm_set(union shape_map* sm, uint8_t y, uint8_t x){
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
 800153c:	4613      	mov	r3, r2
 800153e:	70bb      	strb	r3, [r7, #2]
	switch(y){
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d86a      	bhi.n	800161c <sm_set+0xec>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <sm_set+0x1c>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	0800155d 	.word	0x0800155d
 8001550:	0800158d 	.word	0x0800158d
 8001554:	080015bd 	.word	0x080015bd
 8001558:	080015ed 	.word	0x080015ed
		case 0:
			sm->row1 = sm->row1 ^ (0x1 << (3-x));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b25a      	sxtb	r2, r3
 8001568:	78bb      	ldrb	r3, [r7, #2]
 800156a:	f1c3 0303 	rsb	r3, r3, #3
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	b25b      	sxtb	r3, r3
 8001576:	4053      	eors	r3, r2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2d9      	uxtb	r1, r3
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	7813      	ldrb	r3, [r2, #0]
 8001584:	f361 0303 	bfi	r3, r1, #0, #4
 8001588:	7013      	strb	r3, [r2, #0]
			break;
 800158a:	e047      	b.n	800161c <sm_set+0xec>
		case 1:
			sm->row2 = sm->row2 ^ (0x1 << (3-x));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001594:	b2db      	uxtb	r3, r3
 8001596:	b25a      	sxtb	r2, r3
 8001598:	78bb      	ldrb	r3, [r7, #2]
 800159a:	f1c3 0303 	rsb	r3, r3, #3
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4053      	eors	r3, r2
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	b2d9      	uxtb	r1, r3
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	7813      	ldrb	r3, [r2, #0]
 80015b4:	f361 1307 	bfi	r3, r1, #4, #4
 80015b8:	7013      	strb	r3, [r2, #0]
			break;
 80015ba:	e02f      	b.n	800161c <sm_set+0xec>
		case 2:
			sm->row3 = sm->row3 ^ (0x1 << (3-x));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	b25a      	sxtb	r2, r3
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	f1c3 0303 	rsb	r3, r3, #3
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	4053      	eors	r3, r2
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	b2d9      	uxtb	r1, r3
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	7853      	ldrb	r3, [r2, #1]
 80015e4:	f361 0303 	bfi	r3, r1, #0, #4
 80015e8:	7053      	strb	r3, [r2, #1]
			break;
 80015ea:	e017      	b.n	800161c <sm_set+0xec>
		case 3:
			sm->row4 = sm->row4 ^ (0x1 << (3-x));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	78bb      	ldrb	r3, [r7, #2]
 80015fa:	f1c3 0303 	rsb	r3, r3, #3
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	b25b      	sxtb	r3, r3
 8001606:	4053      	eors	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	b2d9      	uxtb	r1, r3
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	7853      	ldrb	r3, [r2, #1]
 8001614:	f361 1307 	bfi	r3, r1, #4, #4
 8001618:	7053      	strb	r3, [r2, #1]
			break;
 800161a:	bf00      	nop
	}
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <sm_get>:

uint8_t sm_get(union shape_map* sm, uint8_t y, uint8_t x){
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	70fb      	strb	r3, [r7, #3]
 8001634:	4613      	mov	r3, r2
 8001636:	70bb      	strb	r3, [r7, #2]
	uint8_t pixel = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
	switch(y){
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d84a      	bhi.n	80016d8 <sm_get+0xb0>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <sm_get+0x20>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	08001659 	.word	0x08001659
 800164c:	08001679 	.word	0x08001679
 8001650:	08001699 	.word	0x08001699
 8001654:	080016b9 	.word	0x080016b9
		case 0:
			pixel = (sm->row1 >> (3-x)) & 0x1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	78bb      	ldrb	r3, [r7, #2]
 8001666:	f1c3 0303 	rsb	r3, r3, #3
 800166a:	fa42 f303 	asr.w	r3, r2, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
			break;
 8001676:	e02f      	b.n	80016d8 <sm_get+0xb0>
		case 1:
			pixel = (sm->row2 >> (3-x)) & 0x1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	78bb      	ldrb	r3, [r7, #2]
 8001686:	f1c3 0303 	rsb	r3, r3, #3
 800168a:	fa42 f303 	asr.w	r3, r2, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
			break;
 8001696:	e01f      	b.n	80016d8 <sm_get+0xb0>
		case 2:
			pixel = (sm->row3 >> (3-x)) & 0x1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	f1c3 0303 	rsb	r3, r3, #3
 80016aa:	fa42 f303 	asr.w	r3, r2, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
			break;
 80016b6:	e00f      	b.n	80016d8 <sm_get+0xb0>
		case 3:
			pixel = (sm->row4 >> (3-x)) & 0x1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	78bb      	ldrb	r3, [r7, #2]
 80016c6:	f1c3 0303 	rsb	r3, r3, #3
 80016ca:	fa42 f303 	asr.w	r3, r2, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
			break;
 80016d6:	bf00      	nop
	}
	return pixel;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <sm_get_reverse_column>:

static uint8_t sm_get_reverse_column(union shape_map* sm, uint8_t column_index){
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
	uint8_t column = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
	column_index = 3 - column_index;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f1c3 0303 	rsb	r3, r3, #3
 80016fe:	70fb      	strb	r3, [r7, #3]

	column = column ^ (((sm->row1 >> column_index) & 0x1) << 0);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	fa42 f303 	asr.w	r3, r2, r3
 8001712:	b25b      	sxtb	r3, r3
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	b25a      	sxtb	r2, r3
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4053      	eors	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]
	column = column ^ (((sm->row2 >> column_index) & 0x1) << 1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	fa42 f303 	asr.w	r3, r2, r3
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b25b      	sxtb	r3, r3
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	b25a      	sxtb	r2, r3
 8001740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001744:	4053      	eors	r3, r2
 8001746:	b25b      	sxtb	r3, r3
 8001748:	73fb      	strb	r3, [r7, #15]
	column = column ^ (((sm->row3 >> column_index) & 0x1) << 2);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	fa42 f303 	asr.w	r3, r2, r3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	b25a      	sxtb	r2, r3
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4053      	eors	r3, r2
 800176c:	b25b      	sxtb	r3, r3
 800176e:	73fb      	strb	r3, [r7, #15]
	column = column ^ (((sm->row4 >> column_index) & 0x1) << 3);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	fa42 f303 	asr.w	r3, r2, r3
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	b25a      	sxtb	r2, r3
 800178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001790:	4053      	eors	r3, r2
 8001792:	b25b      	sxtb	r3, r3
 8001794:	73fb      	strb	r3, [r7, #15]

	return column;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <sm_rotate>:

// Rotates the sm in the clock wise direction with 90 degrees count%4 times.
void sm_rotate(union shape_map* sm, uint8_t count){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
	uint8_t actual_count = count % 4;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	73bb      	strb	r3, [r7, #14]
	union shape_map to_rotate;
	for(uint8_t i = 0; i < actual_count; ++i){
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e041      	b.n	8001842 <sm_rotate+0x9e>
		// 90degrees clock wise rotation.
		to_rotate.val = sm->val;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	81bb      	strh	r3, [r7, #12]
		sm->row1 = sm_get_reverse_column(&to_rotate, 0);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff8c 	bl	80016e8 <sm_get_reverse_column>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	b2d9      	uxtb	r1, r3
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	7813      	ldrb	r3, [r2, #0]
 80017dc:	f361 0303 	bfi	r3, r1, #0, #4
 80017e0:	7013      	strb	r3, [r2, #0]
		sm->row2 = sm_get_reverse_column(&to_rotate, 1);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2101      	movs	r1, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff7d 	bl	80016e8 <sm_get_reverse_column>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	7813      	ldrb	r3, [r2, #0]
 80017fa:	f361 1307 	bfi	r3, r1, #4, #4
 80017fe:	7013      	strb	r3, [r2, #0]
		sm->row3 = sm_get_reverse_column(&to_rotate, 2);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2102      	movs	r1, #2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff6e 	bl	80016e8 <sm_get_reverse_column>
 800180c:	4603      	mov	r3, r0
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	b2d9      	uxtb	r1, r3
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	7853      	ldrb	r3, [r2, #1]
 8001818:	f361 0303 	bfi	r3, r1, #0, #4
 800181c:	7053      	strb	r3, [r2, #1]
		sm->row4 = sm_get_reverse_column(&to_rotate, 3);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2103      	movs	r1, #3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <sm_get_reverse_column>
 800182a:	4603      	mov	r3, r0
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	7853      	ldrb	r3, [r2, #1]
 8001836:	f361 1307 	bfi	r3, r1, #4, #4
 800183a:	7053      	strb	r3, [r2, #1]
	for(uint8_t i = 0; i < actual_count; ++i){
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	3301      	adds	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	7bbb      	ldrb	r3, [r7, #14]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3b9      	bcc.n	80017be <sm_rotate+0x1a>
	}
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <put_shape_on_map>:

void put_shape_on_map(union shape_map* sm){
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	uint8_t map_x = 0, map_y = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	737b      	strb	r3, [r7, #13]
 8001860:	2300      	movs	r3, #0
 8001862:	733b      	strb	r3, [r7, #12]
	for(uint8_t i = 0; i < 4; ++i){
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e026      	b.n	80018b8 <put_shape_on_map+0x64>
		map_y = sm_cur_y + i;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <put_shape_on_map+0x74>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4413      	add	r3, r2
 8001872:	733b      	strb	r3, [r7, #12]
		for(uint8_t j = 0; j < 4; ++j){
 8001874:	2300      	movs	r3, #0
 8001876:	73bb      	strb	r3, [r7, #14]
 8001878:	e018      	b.n	80018ac <put_shape_on_map+0x58>
			uint8_t bit = sm_get(sm, i, j);
 800187a:	7bba      	ldrb	r2, [r7, #14]
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fed1 	bl	8001628 <sm_get>
 8001886:	4603      	mov	r3, r0
 8001888:	72fb      	strb	r3, [r7, #11]
			if(bit){
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00a      	beq.n	80018a6 <put_shape_on_map+0x52>
				map_x = sm_cur_x + j;
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <put_shape_on_map+0x78>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	7bbb      	ldrb	r3, [r7, #14]
 8001896:	4413      	add	r3, r2
 8001898:	737b      	strb	r3, [r7, #13]
				tetris_set(map_y, map_x);
 800189a:	7b7a      	ldrb	r2, [r7, #13]
 800189c:	7b3b      	ldrb	r3, [r7, #12]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fcc9 	bl	8001238 <tetris_set>
		for(uint8_t j = 0; j < 4; ++j){
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73bb      	strb	r3, [r7, #14]
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d9e3      	bls.n	800187a <put_shape_on_map+0x26>
	for(uint8_t i = 0; i < 4; ++i){
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	3301      	adds	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d9d5      	bls.n	800186a <put_shape_on_map+0x16>
			}
		}
	}
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000492 	.word	0x20000492
 80018cc:	20000493 	.word	0x20000493

080018d0 <display_shape>:

// Displays a live shape without putting it in the map
static void display_shape(void){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
	uint16_t scaled_y = 0, scaled_x = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	817b      	strh	r3, [r7, #10]
 80018da:	2300      	movs	r3, #0
 80018dc:	813b      	strh	r3, [r7, #8]
	uint8_t map_y = 0, map_x = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	2300      	movs	r3, #0
 80018e4:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < 4; ++i){
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e048      	b.n	800197e <display_shape+0xae>
		map_y = sm_cur_y + i;
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <display_shape+0xc0>)
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	4413      	add	r3, r2
 80018f4:	71fb      	strb	r3, [r7, #7]
		for(uint8_t j = 0; j < 4; ++j){
 80018f6:	2300      	movs	r3, #0
 80018f8:	73bb      	strb	r3, [r7, #14]
 80018fa:	e03a      	b.n	8001972 <display_shape+0xa2>
			uint8_t pixel = sm_get(&sm_cur, i, j);
 80018fc:	7bba      	ldrb	r2, [r7, #14]
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	4619      	mov	r1, r3
 8001902:	4824      	ldr	r0, [pc, #144]	; (8001994 <display_shape+0xc4>)
 8001904:	f7ff fe90 	bl	8001628 <sm_get>
 8001908:	4603      	mov	r3, r0
 800190a:	717b      	strb	r3, [r7, #5]
			if(pixel){
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02c      	beq.n	800196c <display_shape+0x9c>
				map_x = sm_cur_x + j;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <display_shape+0xc8>)
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	4413      	add	r3, r2
 800191a:	71bb      	strb	r3, [r7, #6]
				for(uint8_t si = 0; si < 4; ++si){
 800191c:	2300      	movs	r3, #0
 800191e:	737b      	strb	r3, [r7, #13]
 8001920:	e021      	b.n	8001966 <display_shape+0x96>
					scaled_y = map_y*SCALE + si;
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	b29b      	uxth	r3, r3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	b29a      	uxth	r2, r3
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4413      	add	r3, r2
 8001930:	817b      	strh	r3, [r7, #10]
					for(uint8_t sj = 0; sj < 4; ++sj){
 8001932:	2300      	movs	r3, #0
 8001934:	733b      	strb	r3, [r7, #12]
 8001936:	e010      	b.n	800195a <display_shape+0x8a>
						scaled_x = map_x*SCALE  + sj;
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	b29b      	uxth	r3, r3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	b29a      	uxth	r2, r3
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	813b      	strh	r3, [r7, #8]
						SSD1306_DrawPixel(scaled_y, scaled_x, 1);
 8001948:	8939      	ldrh	r1, [r7, #8]
 800194a:	897b      	ldrh	r3, [r7, #10]
 800194c:	2201      	movs	r2, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f986 	bl	8000c60 <SSD1306_DrawPixel>
					for(uint8_t sj = 0; sj < 4; ++sj){
 8001954:	7b3b      	ldrb	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	733b      	strb	r3, [r7, #12]
 800195a:	7b3b      	ldrb	r3, [r7, #12]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d9eb      	bls.n	8001938 <display_shape+0x68>
				for(uint8_t si = 0; si < 4; ++si){
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	3301      	adds	r3, #1
 8001964:	737b      	strb	r3, [r7, #13]
 8001966:	7b7b      	ldrb	r3, [r7, #13]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d9da      	bls.n	8001922 <display_shape+0x52>
		for(uint8_t j = 0; j < 4; ++j){
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	3301      	adds	r3, #1
 8001970:	73bb      	strb	r3, [r7, #14]
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d9c1      	bls.n	80018fc <display_shape+0x2c>
	for(uint8_t i = 0; i < 4; ++i){
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	3301      	adds	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d9b3      	bls.n	80018ec <display_shape+0x1c>
					}
				}
			}
		}
	}
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000492 	.word	0x20000492
 8001994:	20000490 	.word	0x20000490
 8001998:	20000493 	.word	0x20000493

0800199c <display_map>:

// At the end when putting the actual pixels, shuffle x and y (is that enough?)
// decide the piece color (just white for now) and scale up.
void display_map(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
	uint16_t scaled_y = 0, scaled_x = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	2300      	movs	r3, #0
 80019a8:	813b      	strh	r3, [r7, #8]
	for(uint8_t i = 0; i < TETRIS_ROW; ++i){
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e03e      	b.n	8001a2e <display_map+0x92>
		for(uint8_t j = 0; j < TETRIS_COLUMN; ++j){
 80019b0:	2300      	movs	r3, #0
 80019b2:	73bb      	strb	r3, [r7, #14]
 80019b4:	e035      	b.n	8001a22 <display_map+0x86>
			uint8_t bit = tetris_get(i, j);
 80019b6:	7bba      	ldrb	r2, [r7, #14]
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fc5d 	bl	800127c <tetris_get>
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
			if (bit){
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d027      	beq.n	8001a1c <display_map+0x80>
				// Coord conversion according to the scale
				for(uint8_t s_i = 0; s_i < SCALE; ++s_i){
 80019cc:	2300      	movs	r3, #0
 80019ce:	737b      	strb	r3, [r7, #13]
 80019d0:	e021      	b.n	8001a16 <display_map+0x7a>
					scaled_y = i*SCALE + s_i;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	b29a      	uxth	r2, r3
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4413      	add	r3, r2
 80019e0:	817b      	strh	r3, [r7, #10]
					for(uint8_t s_j = 0; s_j < SCALE; ++s_j){
 80019e2:	2300      	movs	r3, #0
 80019e4:	733b      	strb	r3, [r7, #12]
 80019e6:	e010      	b.n	8001a0a <display_map+0x6e>
						scaled_x = j*SCALE + s_j;
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	7b3b      	ldrb	r3, [r7, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	813b      	strh	r3, [r7, #8]
						// X and Y shifted
						SSD1306_DrawPixel(scaled_y, scaled_x, 1);
 80019f8:	8939      	ldrh	r1, [r7, #8]
 80019fa:	897b      	ldrh	r3, [r7, #10]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f92e 	bl	8000c60 <SSD1306_DrawPixel>
					for(uint8_t s_j = 0; s_j < SCALE; ++s_j){
 8001a04:	7b3b      	ldrb	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	733b      	strb	r3, [r7, #12]
 8001a0a:	7b3b      	ldrb	r3, [r7, #12]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d9eb      	bls.n	80019e8 <display_map+0x4c>
				for(uint8_t s_i = 0; s_i < SCALE; ++s_i){
 8001a10:	7b7b      	ldrb	r3, [r7, #13]
 8001a12:	3301      	adds	r3, #1
 8001a14:	737b      	strb	r3, [r7, #13]
 8001a16:	7b7b      	ldrb	r3, [r7, #13]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d9da      	bls.n	80019d2 <display_map+0x36>
		for(uint8_t j = 0; j < TETRIS_COLUMN; ++j){
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	73bb      	strb	r3, [r7, #14]
 8001a22:	7bbb      	ldrb	r3, [r7, #14]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d9c6      	bls.n	80019b6 <display_map+0x1a>
	for(uint8_t i = 0; i < TETRIS_ROW; ++i){
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b1f      	cmp	r3, #31
 8001a32:	d9bd      	bls.n	80019b0 <display_map+0x14>
					}
				}
			}
		}
	}
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <right_blocked>:
void sm_set_coord(uint8_t y, uint8_t x){
	sm_cur_y = y;
	sm_cur_x = x;
}

static uint8_t right_blocked(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	uint8_t blocked = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 4; ++i){
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	71bb      	strb	r3, [r7, #6]
 8001a4e:	e039      	b.n	8001ac4 <right_blocked+0x84>
		for(uint8_t j = 4; j > 0; --j){
 8001a50:	2304      	movs	r3, #4
 8001a52:	717b      	strb	r3, [r7, #5]
 8001a54:	e02b      	b.n	8001aae <right_blocked+0x6e>
			uint8_t bit = sm_get(&sm_cur, i ,j-1);
 8001a56:	797b      	ldrb	r3, [r7, #5]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481d      	ldr	r0, [pc, #116]	; (8001ad8 <right_blocked+0x98>)
 8001a62:	f7ff fde1 	bl	8001628 <sm_get>
 8001a66:	4603      	mov	r3, r0
 8001a68:	713b      	strb	r3, [r7, #4]
			if(bit){
 8001a6a:	793b      	ldrb	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <right_blocked+0x68>
				uint8_t pos_x = sm_cur_x + j-1;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <right_blocked+0x9c>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	797b      	ldrb	r3, [r7, #5]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	70fb      	strb	r3, [r7, #3]
				if(pos_x == TETRIS_COLUMN-1 || tetris_get(sm_cur_y + i,pos_x+1))
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d00e      	beq.n	8001aa2 <right_blocked+0x62>
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <right_blocked+0xa0>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	79bb      	ldrb	r3, [r7, #6]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f7ff fbf0 	bl	800127c <tetris_get>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <right_blocked+0x76>
					blocked = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	71fb      	strb	r3, [r7, #7]
				break;
 8001aa6:	e006      	b.n	8001ab6 <right_blocked+0x76>
		for(uint8_t j = 4; j > 0; --j){
 8001aa8:	797b      	ldrb	r3, [r7, #5]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	717b      	strb	r3, [r7, #5]
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1d0      	bne.n	8001a56 <right_blocked+0x16>
 8001ab4:	e000      	b.n	8001ab8 <right_blocked+0x78>
				break;
 8001ab6:	bf00      	nop
			}
		}
		if(blocked)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <right_blocked+0x8c>
	for(uint8_t i = 0; i < 4; ++i){
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	71bb      	strb	r3, [r7, #6]
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d9c2      	bls.n	8001a50 <right_blocked+0x10>
 8001aca:	e000      	b.n	8001ace <right_blocked+0x8e>
			break;
 8001acc:	bf00      	nop
	}
	return blocked;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000490 	.word	0x20000490
 8001adc:	20000493 	.word	0x20000493
 8001ae0:	20000492 	.word	0x20000492

08001ae4 <left_blocked>:

static uint8_t left_blocked(void){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	uint8_t blocked = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 4; ++i){
 8001aee:	2300      	movs	r3, #0
 8001af0:	71bb      	strb	r3, [r7, #6]
 8001af2:	e035      	b.n	8001b60 <left_blocked+0x7c>
		for(uint8_t j = 0; j < 4; ++j){
 8001af4:	2300      	movs	r3, #0
 8001af6:	717b      	strb	r3, [r7, #5]
 8001af8:	e027      	b.n	8001b4a <left_blocked+0x66>
			uint8_t bit = sm_get(&sm_cur, i ,j);
 8001afa:	797a      	ldrb	r2, [r7, #5]
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	4619      	mov	r1, r3
 8001b00:	481c      	ldr	r0, [pc, #112]	; (8001b74 <left_blocked+0x90>)
 8001b02:	f7ff fd91 	bl	8001628 <sm_get>
 8001b06:	4603      	mov	r3, r0
 8001b08:	713b      	strb	r3, [r7, #4]
			if(bit){
 8001b0a:	793b      	ldrb	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d019      	beq.n	8001b44 <left_blocked+0x60>
				uint8_t pos_x = sm_cur_x + j;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <left_blocked+0x94>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	797b      	ldrb	r3, [r7, #5]
 8001b16:	4413      	add	r3, r2
 8001b18:	70fb      	strb	r3, [r7, #3]
				if(pos_x == 0 || tetris_get(sm_cur_y + i,pos_x-1))
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <left_blocked+0x5a>
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <left_blocked+0x98>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	79bb      	ldrb	r3, [r7, #6]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f7ff fba2 	bl	800127c <tetris_get>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <left_blocked+0x6e>
					blocked = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
				break;
 8001b42:	e006      	b.n	8001b52 <left_blocked+0x6e>
		for(uint8_t j = 0; j < 4; ++j){
 8001b44:	797b      	ldrb	r3, [r7, #5]
 8001b46:	3301      	adds	r3, #1
 8001b48:	717b      	strb	r3, [r7, #5]
 8001b4a:	797b      	ldrb	r3, [r7, #5]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d9d4      	bls.n	8001afa <left_blocked+0x16>
 8001b50:	e000      	b.n	8001b54 <left_blocked+0x70>
				break;
 8001b52:	bf00      	nop
			}
		}
		if(blocked)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <left_blocked+0x84>
	for(uint8_t i = 0; i < 4; ++i){
 8001b5a:	79bb      	ldrb	r3, [r7, #6]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	71bb      	strb	r3, [r7, #6]
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d9c6      	bls.n	8001af4 <left_blocked+0x10>
 8001b66:	e000      	b.n	8001b6a <left_blocked+0x86>
			break;
 8001b68:	bf00      	nop
	}
	return blocked;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000490 	.word	0x20000490
 8001b78:	20000493 	.word	0x20000493
 8001b7c:	20000492 	.word	0x20000492

08001b80 <sm_update>:

void sm_update(enum SM_MOVE move){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
	//TODO add screen borders
	// TODO add borders for other existing pixels on the right or the left
	switch(move){
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d841      	bhi.n	8001c14 <sm_update+0x94>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <sm_update+0x18>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001bc1 	.word	0x08001bc1
 8001ba0:	08001bd9 	.word	0x08001bd9
 8001ba4:	08001c01 	.word	0x08001c01
		case LEFT:
			if(!left_blocked())
 8001ba8:	f7ff ff9c 	bl	8001ae4 <left_blocked>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d12b      	bne.n	8001c0a <sm_update+0x8a>
				sm_cur_x -= 1;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <sm_update+0x9c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <sm_update+0x9c>)
 8001bbc:	701a      	strb	r2, [r3, #0]
			break;
 8001bbe:	e024      	b.n	8001c0a <sm_update+0x8a>
		case RIGHT:
			if(!right_blocked())
 8001bc0:	f7ff ff3e 	bl	8001a40 <right_blocked>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d121      	bne.n	8001c0e <sm_update+0x8e>
				sm_cur_x += 1;
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <sm_update+0x9c>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <sm_update+0x9c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
			break;
 8001bd6:	e01a      	b.n	8001c0e <sm_update+0x8e>
		case DOWN:
				if (lock)
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <sm_update+0xa0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <sm_update+0x92>
					return;
				if(!sm_bottom_hits())
 8001be0:	f7ff fb68 	bl	80012b4 <sm_bottom_hits>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <sm_update+0x78>
					++sm_cur_y;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <sm_update+0xa4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <sm_update+0xa4>)
 8001bf4:	701a      	strb	r2, [r3, #0]
				else
					lock = 1;
			break;
 8001bf6:	e00d      	b.n	8001c14 <sm_update+0x94>
					lock = 1;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <sm_update+0xa0>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
			break;
 8001bfe:	e009      	b.n	8001c14 <sm_update+0x94>
		case ROTATE:
			sm_rotate(&sm_cur, 1);
 8001c00:	2101      	movs	r1, #1
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <sm_update+0xa8>)
 8001c04:	f7ff fdce 	bl	80017a4 <sm_rotate>
			break;
 8001c08:	e004      	b.n	8001c14 <sm_update+0x94>
			break;
 8001c0a:	bf00      	nop
 8001c0c:	e002      	b.n	8001c14 <sm_update+0x94>
			break;
 8001c0e:	bf00      	nop
 8001c10:	e000      	b.n	8001c14 <sm_update+0x94>
					return;
 8001c12:	bf00      	nop
	}
}
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000493 	.word	0x20000493
 8001c20:	20000494 	.word	0x20000494
 8001c24:	20000492 	.word	0x20000492
 8001c28:	20000490 	.word	0x20000490

08001c2c <rng_seed>:

void rng_seed(uint32_t seed){
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	rng_state = seed;
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <rng_seed+0x1c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c

08001c4c <rng>:

static uint32_t rng(void){
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
	rng_state = rng_state * 1664525 + 1620847577;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <rng+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <rng+0x28>)
 8001c56:	fb03 f202 	mul.w	r2, r3, r2
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <rng+0x2c>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <rng+0x24>)
 8001c60:	6013      	str	r3, [r2, #0]
	return rng_state;
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <rng+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	2000000c 	.word	0x2000000c
 8001c74:	0019660d 	.word	0x0019660d
 8001c78:	609c2bd9 	.word	0x609c2bd9

08001c7c <check_elimination>:

static void check_elimination(void){
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
	uint8_t rows_to_eliminate = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	71fb      	strb	r3, [r7, #7]
	uint8_t start_row = 200;
 8001c86:	23c8      	movs	r3, #200	; 0xc8
 8001c88:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = TETRIS_ROW; i > 0; --i){
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	717b      	strb	r3, [r7, #5]
 8001c8e:	e014      	b.n	8001cba <check_elimination+0x3e>
		if(map[i-1] == 0xffff){
 8001c90:	797b      	ldrb	r3, [r7, #5]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <check_elimination+0xb4>)
 8001c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <check_elimination+0x38>
			++rows_to_eliminate;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	71fb      	strb	r3, [r7, #7]
			if(start_row == 200)
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	2bc8      	cmp	r3, #200	; 0xc8
 8001cac:	d102      	bne.n	8001cb4 <check_elimination+0x38>
				start_row = i-1;
 8001cae:	797b      	ldrb	r3, [r7, #5]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = TETRIS_ROW; i > 0; --i){
 8001cb4:	797b      	ldrb	r3, [r7, #5]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	717b      	strb	r3, [r7, #5]
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e7      	bne.n	8001c90 <check_elimination+0x14>
		}
	}
	if(rows_to_eliminate){
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02d      	beq.n	8001d22 <check_elimination+0xa6>
		score += rows_to_eliminate * TETRIS_COLUMN;
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <check_elimination+0xb8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <check_elimination+0xb8>)
 8001cd4:	6013      	str	r3, [r2, #0]
		for(uint8_t i = start_row+1; i > rows_to_eliminate; --i){
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	713b      	strb	r3, [r7, #4]
 8001cdc:	e00e      	b.n	8001cfc <check_elimination+0x80>
			map[i-1] = map[i-1 - rows_to_eliminate];
 8001cde:	793b      	ldrb	r3, [r7, #4]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	1ad2      	subs	r2, r2, r3
 8001ce6:	793b      	ldrb	r3, [r7, #4]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	4911      	ldr	r1, [pc, #68]	; (8001d30 <check_elimination+0xb4>)
 8001cec:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <check_elimination+0xb4>)
 8001cf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = start_row+1; i > rows_to_eliminate; --i){
 8001cf6:	793b      	ldrb	r3, [r7, #4]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	713b      	strb	r3, [r7, #4]
 8001cfc:	793a      	ldrb	r2, [r7, #4]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8ec      	bhi.n	8001cde <check_elimination+0x62>
		}
		for(uint8_t i = 0; i < rows_to_eliminate; ++i)
 8001d04:	2300      	movs	r3, #0
 8001d06:	70fb      	strb	r3, [r7, #3]
 8001d08:	e007      	b.n	8001d1a <check_elimination+0x9e>
			map[i] = 0;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <check_elimination+0xb4>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < rows_to_eliminate; ++i)
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	3301      	adds	r3, #1
 8001d18:	70fb      	strb	r3, [r7, #3]
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3f3      	bcc.n	8001d0a <check_elimination+0x8e>
	}
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000450 	.word	0x20000450
 8001d34:	2000049c 	.word	0x2000049c

08001d38 <game_iteration>:

// TODO add color input,
enum GAME_STATE game_iteration(enum SM_MOVE move){
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	uint8_t go_down = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]

	if(last_time + interval < HAL_GetTick()){
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <game_iteration+0xf0>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <game_iteration+0xf4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	18d4      	adds	r4, r2, r3
 8001d50:	f000 f93e 	bl	8001fd0 <HAL_GetTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	429c      	cmp	r4, r3
 8001d58:	d206      	bcs.n	8001d68 <game_iteration+0x30>
		last_time = HAL_GetTick();
 8001d5a:	f000 f939 	bl	8001fd0 <HAL_GetTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <game_iteration+0xf0>)
 8001d62:	6013      	str	r3, [r2, #0]
		go_down = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
	}

	if(go_down || move != NO_INPUT)
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <game_iteration+0x3c>
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d001      	beq.n	8001d78 <game_iteration+0x40>
		SSD1306_Clear();
 8001d74:	f7ff f88f 	bl	8000e96 <SSD1306_Clear>

	if(tetris_get(0, 8))
 8001d78:	2108      	movs	r1, #8
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fa7e 	bl	800127c <tetris_get>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <game_iteration+0x52>
		return LOST;
 8001d86:	2302      	movs	r3, #2
 8001d88:	e04a      	b.n	8001e20 <game_iteration+0xe8>

	// New shape, init it.
	if(sm_cur_x == 0 && sm_cur_y == 0){
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <game_iteration+0xf8>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11a      	bne.n	8001dc8 <game_iteration+0x90>
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <game_iteration+0xfc>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <game_iteration+0x90>
		sm_cur_x = 8;
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <game_iteration+0xf8>)
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	701a      	strb	r2, [r3, #0]
		uint32_t shape = rng() % SHAPE_COUNT;
 8001da0:	f7ff ff54 	bl	8001c4c <rng>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <game_iteration+0x100>)
 8001da8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dac:	0899      	lsrs	r1, r3, #2
 8001dae:	460b      	mov	r3, r1
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	60bb      	str	r3, [r7, #8]
		sm_set_shape(&sm_cur, shape, 0);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	481e      	ldr	r0, [pc, #120]	; (8001e3c <game_iteration+0x104>)
 8001dc2:	f7ff fb03 	bl	80013cc <sm_set_shape>
	if(sm_cur_x == 0 && sm_cur_y == 0){
 8001dc6:	e003      	b.n	8001dd0 <game_iteration+0x98>
	}else{
		sm_update(move);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fed8 	bl	8001b80 <sm_update>
	}

	//go down one.
	if(go_down)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <game_iteration+0xa4>
		sm_update(DOWN);
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f7ff fed2 	bl	8001b80 <sm_update>
	// We've hit the bottom.
	if(lock){
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <game_iteration+0x108>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <game_iteration+0xce>
		// Put shape data on the map.
		put_shape_on_map(&sm_cur);
 8001de4:	4815      	ldr	r0, [pc, #84]	; (8001e3c <game_iteration+0x104>)
 8001de6:	f7ff fd35 	bl	8001854 <put_shape_on_map>
		// Reset the vals.
		sm_cur_x = sm_cur_y = lock = 0;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <game_iteration+0x108>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <game_iteration+0x108>)
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <game_iteration+0xfc>)
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <game_iteration+0xfc>)
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <game_iteration+0xf8>)
 8001dfe:	701a      	strb	r2, [r3, #0]
		// Check elimination
		check_elimination();
 8001e00:	f7ff ff3c 	bl	8001c7c <check_elimination>
 8001e04:	e001      	b.n	8001e0a <game_iteration+0xd2>
	}else{
		// Shape is not locked, display it separately
		display_shape();
 8001e06:	f7ff fd63 	bl	80018d0 <display_shape>
	}
	// Display the map
	if(go_down || move != NO_INPUT){
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <game_iteration+0xde>
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d003      	beq.n	8001e1e <game_iteration+0xe6>
		display_map();
 8001e16:	f7ff fdc1 	bl	800199c <display_map>
		SSD1306_UpdateScreen();
 8001e1a:	f7fe fed3 	bl	8000bc4 <SSD1306_UpdateScreen>
	}
	return RUNNING;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	20000498 	.word	0x20000498
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000493 	.word	0x20000493
 8001e34:	20000492 	.word	0x20000492
 8001e38:	cccccccd 	.word	0xcccccccd
 8001e3c:	20000490 	.word	0x20000490
 8001e40:	20000494 	.word	0x20000494

08001e44 <get_score>:

uint32_t get_score(void){
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	return score;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <get_score+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000049c 	.word	0x2000049c

08001e5c <init_game>:

void init_game(void){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
	score = 0;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <init_game+0x44>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
	sm_cur_y = sm_cur_x = 0;
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <init_game+0x48>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <init_game+0x48>)
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <init_game+0x4c>)
 8001e74:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < TETRIS_ROW; ++i)
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	e007      	b.n	8001e8c <init_game+0x30>
		map[i] = 0;
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <init_game+0x50>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2100      	movs	r1, #0
 8001e82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = 0; i < TETRIS_ROW; ++i)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b1f      	cmp	r3, #31
 8001e90:	d9f4      	bls.n	8001e7c <init_game+0x20>
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	2000049c 	.word	0x2000049c
 8001ea4:	20000493 	.word	0x20000493
 8001ea8:	20000492 	.word	0x20000492
 8001eac:	20000450 	.word	0x20000450

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ecc:	4c0b      	ldr	r4, [pc, #44]	; (8001efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eda:	f7ff f99b 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f002 fc87 	bl	80047f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7fe fafb 	bl	80004dc <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001ef4:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 8001ef8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001efc:	200005a8 	.word	0x200005a8

08001f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_Init+0x40>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_Init+0x40>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_Init+0x40>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 fd51 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	200f      	movs	r0, #15
 8001f34:	f000 f808 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f38:	f7ff f850 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x54>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x58>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fd69 	bl	8002a3e <HAL_SYSTICK_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	d80a      	bhi.n	8001f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f000 fd31 	bl	80029ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f88:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <HAL_InitTick+0x5c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000018 	.word	0x20000018
 8001fa4:	20000014 	.word	0x20000014

08001fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x20>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x24>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_IncTick+0x24>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000018 	.word	0x20000018
 8001fcc:	200005a4 	.word	0x200005a4

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200005a4 	.word	0x200005a4

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff ffee 	bl	8001fd0 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d005      	beq.n	800200e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_Delay+0x44>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200e:	bf00      	nop
 8002010:	f7ff ffde 	bl	8001fd0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d8f7      	bhi.n	8002010 <HAL_Delay+0x28>
  {
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000018 	.word	0x20000018

08002030 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e033      	b.n	80020ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe ffec 	bl	800102c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002076:	f023 0302 	bic.w	r3, r3, #2
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fa58 	bl	8002538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
 800209e:	e001      	b.n	80020a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Start_DMA+0x1e>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e0ce      	b.n	8002274 <HAL_ADC_Start_DMA+0x1bc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d018      	beq.n	800211e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020fc:	4b5f      	ldr	r3, [pc, #380]	; (800227c <HAL_ADC_Start_DMA+0x1c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a5f      	ldr	r2, [pc, #380]	; (8002280 <HAL_ADC_Start_DMA+0x1c8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9a      	lsrs	r2, r3, #18
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002110:	e002      	b.n	8002118 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	3b01      	subs	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f9      	bne.n	8002112 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212c:	d107      	bne.n	800213e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800213c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	f040 8086 	bne.w	800225a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d106      	bne.n	800219c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f023 0206 	bic.w	r2, r3, #6
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
 800219a:	e002      	b.n	80021a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021aa:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_ADC_Start_DMA+0x1cc>)
 80021ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	4a35      	ldr	r2, [pc, #212]	; (8002288 <HAL_ADC_Start_DMA+0x1d0>)
 80021b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	4a34      	ldr	r2, [pc, #208]	; (800228c <HAL_ADC_Start_DMA+0x1d4>)
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	4a33      	ldr	r2, [pc, #204]	; (8002290 <HAL_ADC_Start_DMA+0x1d8>)
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	334c      	adds	r3, #76	; 0x4c
 80021fa:	4619      	mov	r1, r3
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f000 fcd8 	bl	8002bb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10f      	bne.n	8002230 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d129      	bne.n	8002272 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	e020      	b.n	8002272 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_ADC_Start_DMA+0x1dc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d11b      	bne.n	8002272 <HAL_ADC_Start_DMA+0x1ba>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d114      	bne.n	8002272 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	e00b      	b.n	8002272 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0210 	orr.w	r2, r3, #16
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000008 	.word	0x20000008
 8002280:	431bde83 	.word	0x431bde83
 8002284:	40012300 	.word	0x40012300
 8002288:	08002731 	.word	0x08002731
 800228c:	080027eb 	.word	0x080027eb
 8002290:	08002807 	.word	0x08002807
 8002294:	40012000 	.word	0x40012000

08002298 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1c>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e113      	b.n	8002518 <HAL_ADC_ConfigChannel+0x244>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	d925      	bls.n	800234c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68d9      	ldr	r1, [r3, #12]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	3b1e      	subs	r3, #30
 8002316:	2207      	movs	r2, #7
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43da      	mvns	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	400a      	ands	r2, r1
 8002324:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	4603      	mov	r3, r0
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4403      	add	r3, r0
 800233e:	3b1e      	subs	r3, #30
 8002340:	409a      	lsls	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	e022      	b.n	8002392 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6919      	ldr	r1, [r3, #16]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	2207      	movs	r2, #7
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	400a      	ands	r2, r1
 800236e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	4603      	mov	r3, r0
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4403      	add	r3, r0
 8002388:	409a      	lsls	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d824      	bhi.n	80023e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	3b05      	subs	r3, #5
 80023ac:	221f      	movs	r2, #31
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	400a      	ands	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b05      	subs	r3, #5
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	635a      	str	r2, [r3, #52]	; 0x34
 80023e2:	e04c      	b.n	800247e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	d824      	bhi.n	8002436 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b23      	subs	r3, #35	; 0x23
 80023fe:	221f      	movs	r2, #31
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43da      	mvns	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	400a      	ands	r2, r1
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b23      	subs	r3, #35	; 0x23
 8002428:	fa00 f203 	lsl.w	r2, r0, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
 8002434:	e023      	b.n	800247e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b41      	subs	r3, #65	; 0x41
 8002448:	221f      	movs	r2, #31
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	3b41      	subs	r3, #65	; 0x41
 8002472:	fa00 f203 	lsl.w	r2, r0, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_ADC_ConfigChannel+0x250>)
 8002480:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a28      	ldr	r2, [pc, #160]	; (8002528 <HAL_ADC_ConfigChannel+0x254>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10f      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1d8>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b12      	cmp	r3, #18
 8002492:	d10b      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_ADC_ConfigChannel+0x254>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12b      	bne.n	800250e <HAL_ADC_ConfigChannel+0x23a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_ADC_ConfigChannel+0x258>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d003      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x1f4>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b11      	cmp	r3, #17
 80024c6:	d122      	bne.n	800250e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_ADC_ConfigChannel+0x258>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d111      	bne.n	800250e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_ADC_ConfigChannel+0x25c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_ADC_ConfigChannel+0x260>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	0c9a      	lsrs	r2, r3, #18
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002500:	e002      	b.n	8002508 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	3b01      	subs	r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f9      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40012300 	.word	0x40012300
 8002528:	40012000 	.word	0x40012000
 800252c:	10000012 	.word	0x10000012
 8002530:	20000008 	.word	0x20000008
 8002534:	431bde83 	.word	0x431bde83

08002538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002540:	4b79      	ldr	r3, [pc, #484]	; (8002728 <ADC_Init+0x1f0>)
 8002542:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800256c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	021a      	lsls	r2, r3, #8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	4a58      	ldr	r2, [pc, #352]	; (800272c <ADC_Init+0x1f4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6899      	ldr	r1, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	e00f      	b.n	8002636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0202 	bic.w	r2, r2, #2
 8002644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6899      	ldr	r1, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7e1b      	ldrb	r3, [r3, #24]
 8002650:	005a      	lsls	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01b      	beq.n	800269c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	3b01      	subs	r3, #1
 8002690:	035a      	lsls	r2, r3, #13
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	e007      	b.n	80026ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	051a      	lsls	r2, r3, #20
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ee:	025a      	lsls	r2, r3, #9
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	029a      	lsls	r2, r3, #10
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40012300 	.word	0x40012300
 800272c:	0f000001 	.word	0x0f000001

08002730 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002746:	2b00      	cmp	r3, #0
 8002748:	d13c      	bne.n	80027c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d12b      	bne.n	80027bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	d127      	bne.n	80027bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002784:	2b00      	cmp	r3, #0
 8002786:	d119      	bne.n	80027bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0220 	bic.w	r2, r2, #32
 8002796:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff fd6b 	bl	8002298 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027c2:	e00e      	b.n	80027e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff fd75 	bl	80022c0 <HAL_ADC_ErrorCallback>
}
 80027d6:	e004      	b.n	80027e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff fd57 	bl	80022ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff fd4a 	bl	80022c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a0:	d301      	bcc.n	80029a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <SysTick_Config+0x40>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ae:	210f      	movs	r1, #15
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f7ff ff8e 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <SysTick_Config+0x40>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SysTick_Config+0x40>)
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff29 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029fc:	f7ff ff3e 	bl	800287c <__NVIC_GetPriorityGrouping>
 8002a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7ff ff8e 	bl	8002928 <NVIC_EncodePriority>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff5d 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff31 	bl	8002898 <__NVIC_EnableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffa2 	bl	8002990 <SysTick_Config>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a64:	f7ff fab4 	bl	8001fd0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e099      	b.n	8002ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a94:	e00f      	b.n	8002ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a96:	f7ff fa9b 	bl	8001fd0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d908      	bls.n	8002ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2203      	movs	r2, #3
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e078      	b.n	8002ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e8      	bne.n	8002a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_DMA_Init+0x158>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d107      	bne.n	8002b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0307 	bic.w	r3, r3, #7
 8002b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d117      	bne.n	8002b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00e      	beq.n	8002b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fa6f 	bl	8003040 <DMA_CheckFifoParam>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2240      	movs	r2, #64	; 0x40
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b76:	2301      	movs	r3, #1
 8002b78:	e016      	b.n	8002ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fa26 	bl	8002fd4 <DMA_CalcBaseAndBitshift>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	223f      	movs	r2, #63	; 0x3f
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	f010803f 	.word	0xf010803f

08002bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Start_IT+0x26>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e040      	b.n	8002c5c <HAL_DMA_Start_IT+0xa8>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d12f      	bne.n	8002c4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f9b8 	bl	8002f78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0216 	orr.w	r2, r2, #22
 8002c22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0208 	orr.w	r2, r2, #8
 8002c3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e005      	b.n	8002c5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
 8002c58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c70:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_DMA_IRQHandler+0x248>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a8e      	ldr	r2, [pc, #568]	; (8002eb0 <HAL_DMA_IRQHandler+0x24c>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2208      	movs	r2, #8
 8002c90:	409a      	lsls	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0204 	bic.w	r2, r2, #4
 8002cb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	2204      	movs	r2, #4
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2210      	movs	r2, #16
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d043      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d03c      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	2210      	movs	r2, #16
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d018      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d024      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	e01f      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
 8002da4:	e016      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0208 	bic.w	r2, r2, #8
 8002dc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2220      	movs	r2, #32
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 808f 	beq.w	8002f04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8087 	beq.w	8002f04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d136      	bne.n	8002e7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0216 	bic.w	r2, r2, #22
 8002e1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x1da>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	223f      	movs	r2, #63	; 0x3f
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d07e      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
        }
        return;
 8002e7a:	e079      	b.n	8002f70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01d      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e02c      	b.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
 8002eaa:	bf00      	nop
 8002eac:	20000008 	.word	0x20000008
 8002eb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d023      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e01e      	b.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0210 	bic.w	r2, r2, #16
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d032      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d307      	bcc.n	8002f4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x2cc>
 8002f4a:	e000      	b.n	8002f4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
 8002f6e:	e000      	b.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f70:	bf00      	nop
    }
  }
}
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d108      	bne.n	8002fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fb6:	e007      	b.n	8002fc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	3b10      	subs	r3, #16
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <DMA_CalcBaseAndBitshift+0x68>)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d909      	bls.n	8003016 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	1d1a      	adds	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	; 0x58
 8003014:	e007      	b.n	8003026 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	aaaaaaab 	.word	0xaaaaaaab
 800303c:	080056bc 	.word	0x080056bc

08003040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11f      	bne.n	800309a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d856      	bhi.n	800310e <DMA_CheckFifoParam+0xce>
 8003060:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <DMA_CheckFifoParam+0x28>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	08003079 	.word	0x08003079
 800306c:	0800308b 	.word	0x0800308b
 8003070:	08003079 	.word	0x08003079
 8003074:	0800310f 	.word	0x0800310f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d046      	beq.n	8003112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e043      	b.n	8003112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003092:	d140      	bne.n	8003116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e03d      	b.n	8003116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a2:	d121      	bne.n	80030e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d837      	bhi.n	800311a <DMA_CheckFifoParam+0xda>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <DMA_CheckFifoParam+0x70>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030c7 	.word	0x080030c7
 80030b8:	080030c1 	.word	0x080030c1
 80030bc:	080030d9 	.word	0x080030d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e030      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d025      	beq.n	800311e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d6:	e022      	b.n	800311e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e0:	d11f      	bne.n	8003122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e6:	e01c      	b.n	8003122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d903      	bls.n	80030f6 <DMA_CheckFifoParam+0xb6>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d003      	beq.n	80030fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f4:	e018      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      break;
 80030fa:	e015      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e00b      	b.n	8003126 <DMA_CheckFifoParam+0xe6>
      break;
 800310e:	bf00      	nop
 8003110:	e00a      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e008      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e006      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;   
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
    }
  } 
  
  return status; 
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e159      	b.n	8003408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	f040 8148 	bne.w	8003402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d005      	beq.n	800318a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003186:	2b02      	cmp	r3, #2
 8003188:	d130      	bne.n	80031ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0201 	and.w	r2, r3, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d017      	beq.n	8003228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d123      	bne.n	800327c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a2 	beq.w	8003402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	4b57      	ldr	r3, [pc, #348]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4a56      	ldr	r2, [pc, #344]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6453      	str	r3, [r2, #68]	; 0x44
 80032ce:	4b54      	ldr	r3, [pc, #336]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032da:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	3302      	adds	r3, #2
 80032e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d019      	beq.n	800333a <HAL_GPIO_Init+0x202>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <HAL_GPIO_Init+0x2f4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_GPIO_Init+0x1fe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a47      	ldr	r2, [pc, #284]	; (8003430 <HAL_GPIO_Init+0x2f8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00d      	beq.n	8003332 <HAL_GPIO_Init+0x1fa>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a46      	ldr	r2, [pc, #280]	; (8003434 <HAL_GPIO_Init+0x2fc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <HAL_GPIO_Init+0x1f6>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a45      	ldr	r2, [pc, #276]	; (8003438 <HAL_GPIO_Init+0x300>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_GPIO_Init+0x1f2>
 8003326:	2304      	movs	r3, #4
 8003328:	e008      	b.n	800333c <HAL_GPIO_Init+0x204>
 800332a:	2307      	movs	r3, #7
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x204>
 800332e:	2303      	movs	r3, #3
 8003330:	e004      	b.n	800333c <HAL_GPIO_Init+0x204>
 8003332:	2302      	movs	r3, #2
 8003334:	e002      	b.n	800333c <HAL_GPIO_Init+0x204>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_GPIO_Init+0x204>
 800333a:	2300      	movs	r3, #0
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f002 0203 	and.w	r2, r2, #3
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	4093      	lsls	r3, r2
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800334c:	4935      	ldr	r1, [pc, #212]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_GPIO_Init+0x304>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337e:	4a2f      	ldr	r2, [pc, #188]	; (800343c <HAL_GPIO_Init+0x304>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_GPIO_Init+0x304>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <HAL_GPIO_Init+0x304>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_GPIO_Init+0x304>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_GPIO_Init+0x304>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_GPIO_Init+0x304>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <HAL_GPIO_Init+0x304>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b0f      	cmp	r3, #15
 800340c:	f67f aea2 	bls.w	8003154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	40013800 	.word	0x40013800
 8003428:	40020000 	.word	0x40020000
 800342c:	40020400 	.word	0x40020400
 8003430:	40020800 	.word	0x40020800
 8003434:	40020c00 	.word	0x40020c00
 8003438:	40021000 	.word	0x40021000
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e12b      	b.n	80036de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fe3e 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	; 0x24
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d8:	f001 f976 	bl	80047c8 <HAL_RCC_GetPCLK1Freq>
 80034dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a81      	ldr	r2, [pc, #516]	; (80036e8 <HAL_I2C_Init+0x274>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d807      	bhi.n	80034f8 <HAL_I2C_Init+0x84>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a80      	ldr	r2, [pc, #512]	; (80036ec <HAL_I2C_Init+0x278>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bf94      	ite	ls
 80034f0:	2301      	movls	r3, #1
 80034f2:	2300      	movhi	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e006      	b.n	8003506 <HAL_I2C_Init+0x92>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a7d      	ldr	r2, [pc, #500]	; (80036f0 <HAL_I2C_Init+0x27c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	bf94      	ite	ls
 8003500:	2301      	movls	r3, #1
 8003502:	2300      	movhi	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0e7      	b.n	80036de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4a78      	ldr	r2, [pc, #480]	; (80036f4 <HAL_I2C_Init+0x280>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	0c9b      	lsrs	r3, r3, #18
 8003518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_I2C_Init+0x274>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <HAL_I2C_Init+0xd4>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3301      	adds	r3, #1
 8003546:	e009      	b.n	800355c <HAL_I2C_Init+0xe8>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	4a69      	ldr	r2, [pc, #420]	; (80036f8 <HAL_I2C_Init+0x284>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	3301      	adds	r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	430b      	orrs	r3, r1
 8003562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800356e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	495c      	ldr	r1, [pc, #368]	; (80036e8 <HAL_I2C_Init+0x274>)
 8003578:	428b      	cmp	r3, r1
 800357a:	d819      	bhi.n	80035b0 <HAL_I2C_Init+0x13c>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e59      	subs	r1, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fbb1 f3f3 	udiv	r3, r1, r3
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003590:	400b      	ands	r3, r1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_I2C_Init+0x138>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1e59      	subs	r1, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035aa:	e051      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 80035ac:	2304      	movs	r3, #4
 80035ae:	e04f      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <HAL_I2C_Init+0x168>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	440b      	add	r3, r1
 80035c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e012      	b.n	8003602 <HAL_I2C_Init+0x18e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Init+0x196>
 8003606:	2301      	movs	r3, #1
 8003608:	e022      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10e      	bne.n	8003630 <HAL_I2C_Init+0x1bc>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1e58      	subs	r0, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	440b      	add	r3, r1
 8003620:	fbb0 f3f3 	udiv	r3, r0, r3
 8003624:	3301      	adds	r3, #1
 8003626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800362e:	e00f      	b.n	8003650 <HAL_I2C_Init+0x1dc>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e58      	subs	r0, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	0099      	lsls	r1, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	6809      	ldr	r1, [r1, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800367e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6911      	ldr	r1, [r2, #16]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	430b      	orrs	r3, r1
 8003692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	000186a0 	.word	0x000186a0
 80036ec:	001e847f 	.word	0x001e847f
 80036f0:	003d08ff 	.word	0x003d08ff
 80036f4:	431bde83 	.word	0x431bde83
 80036f8:	10624dd3 	.word	0x10624dd3

080036fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	461a      	mov	r2, r3
 8003708:	460b      	mov	r3, r1
 800370a:	817b      	strh	r3, [r7, #10]
 800370c:	4613      	mov	r3, r2
 800370e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7fe fc5e 	bl	8001fd0 <HAL_GetTick>
 8003714:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b20      	cmp	r3, #32
 8003720:	f040 80e0 	bne.w	80038e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2319      	movs	r3, #25
 800372a:	2201      	movs	r2, #1
 800372c:	4970      	ldr	r1, [pc, #448]	; (80038f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa92 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800373a:	2302      	movs	r3, #2
 800373c:	e0d3      	b.n	80038e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_I2C_Master_Transmit+0x50>
 8003748:	2302      	movs	r3, #2
 800374a:	e0cc      	b.n	80038e6 <HAL_I2C_Master_Transmit+0x1ea>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d007      	beq.n	8003772 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003780:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2221      	movs	r2, #33	; 0x21
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2210      	movs	r2, #16
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	893a      	ldrh	r2, [r7, #8]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a50      	ldr	r2, [pc, #320]	; (80038f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037b4:	8979      	ldrh	r1, [r7, #10]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f9ca 	bl	8003b54 <I2C_MasterRequestWrite>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e08d      	b.n	80038e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037e0:	e066      	b.n	80038b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	6a39      	ldr	r1, [r7, #32]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fb0c 	bl	8003e04 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d107      	bne.n	800380a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06b      	b.n	80038e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_I2C_Master_Transmit+0x188>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d017      	beq.n	8003884 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	6a39      	ldr	r1, [r7, #32]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fafc 	bl	8003e86 <I2C_WaitOnBTFFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2b04      	cmp	r3, #4
 800389a:	d107      	bne.n	80038ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e01a      	b.n	80038e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d194      	bne.n	80037e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	00100002 	.word	0x00100002
 80038f4:	ffff0000 	.word	0xffff0000

080038f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	460b      	mov	r3, r1
 8003906:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7fe fb62 	bl	8001fd0 <HAL_GetTick>
 800390c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	f040 8111 	bne.w	8003b42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2319      	movs	r3, #25
 8003926:	2201      	movs	r2, #1
 8003928:	4988      	ldr	r1, [pc, #544]	; (8003b4c <HAL_I2C_IsDeviceReady+0x254>)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f994 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003936:	2302      	movs	r3, #2
 8003938:	e104      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_I2C_IsDeviceReady+0x50>
 8003944:	2302      	movs	r3, #2
 8003946:	e0fd      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d007      	beq.n	800396e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800397c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2224      	movs	r2, #36	; 0x24
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a70      	ldr	r2, [pc, #448]	; (8003b50 <HAL_I2C_IsDeviceReady+0x258>)
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f952 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c8:	d103      	bne.n	80039d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0b6      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fe faf3 	bl	8001fd0 <HAL_GetTick>
 80039ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a1a:	e025      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7fe fad8 	bl	8001fd0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <HAL_I2C_IsDeviceReady+0x13a>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	22a0      	movs	r2, #160	; 0xa0
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2ba0      	cmp	r3, #160	; 0xa0
 8003a72:	d005      	beq.n	8003a80 <HAL_I2C_IsDeviceReady+0x188>
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_I2C_IsDeviceReady+0x188>
 8003a7a:	7dbb      	ldrb	r3, [r7, #22]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0cd      	beq.n	8003a1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d129      	bne.n	8003aea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2319      	movs	r3, #25
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4921      	ldr	r1, [pc, #132]	; (8003b4c <HAL_I2C_IsDeviceReady+0x254>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8c6 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e036      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e02c      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	490f      	ldr	r1, [pc, #60]	; (8003b4c <HAL_I2C_IsDeviceReady+0x254>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8a2 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e012      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	f4ff af32 	bcc.w	8003992 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00100002 	.word	0x00100002
 8003b50:	ffff0000 	.word	0xffff0000

08003b54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	460b      	mov	r3, r1
 8003b62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d006      	beq.n	8003b7e <I2C_MasterRequestWrite+0x2a>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d003      	beq.n	8003b7e <I2C_MasterRequestWrite+0x2a>
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b7c:	d108      	bne.n	8003b90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e00b      	b.n	8003ba8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	2b12      	cmp	r3, #18
 8003b96:	d107      	bne.n	8003ba8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f84f 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d103      	bne.n	8003bd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e035      	b.n	8003c48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be4:	d108      	bne.n	8003bf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003be6:	897b      	ldrh	r3, [r7, #10]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	e01b      	b.n	8003c30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf8:	897b      	ldrh	r3, [r7, #10]
 8003bfa:	11db      	asrs	r3, r3, #7
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0306 	and.w	r3, r3, #6
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f063 030f 	orn	r3, r3, #15
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	490e      	ldr	r1, [pc, #56]	; (8003c50 <I2C_MasterRequestWrite+0xfc>)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f875 	bl	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e010      	b.n	8003c48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c26:	897b      	ldrh	r3, [r7, #10]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4907      	ldr	r1, [pc, #28]	; (8003c54 <I2C_MasterRequestWrite+0x100>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f865 	bl	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	00010008 	.word	0x00010008
 8003c54:	00010002 	.word	0x00010002

08003c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e025      	b.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d021      	beq.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe f9ad 	bl	8001fd0 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d116      	bne.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e023      	b.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10d      	bne.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf0c      	ite	eq
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	2300      	movne	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	e00c      	b.n	8003cf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d0b6      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d14:	e051      	b.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d24:	d123      	bne.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0204 	orr.w	r2, r3, #4
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e046      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d021      	beq.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe f92b 	bl	8001fd0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d116      	bne.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e020      	b.n	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10c      	bne.n	8003dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e00b      	b.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d18d      	bne.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e10:	e02d      	b.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f878 	bl	8003f08 <I2C_IsAcknowledgeFailed>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e02d      	b.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d021      	beq.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe f8d1 	bl	8001fd0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e007      	b.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d1ca      	bne.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e92:	e02d      	b.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f837 	bl	8003f08 <I2C_IsAcknowledgeFailed>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e02d      	b.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d021      	beq.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eac:	f7fe f890 	bl	8001fd0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d1ca      	bne.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d11b      	bne.n	8003f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f043 0204 	orr.w	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e267      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00c      	beq.n	8003fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f92:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b82      	ldr	r3, [pc, #520]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b7e      	ldr	r3, [pc, #504]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d157      	bne.n	8004070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e242      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x74>
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a75      	ldr	r2, [pc, #468]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x98>
 8003fe6:	4b70      	ldr	r3, [pc, #448]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6f      	ldr	r2, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b6d      	ldr	r3, [pc, #436]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6c      	ldr	r2, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8004000:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a68      	ldr	r2, [pc, #416]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a65      	ldr	r2, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fd ffd6 	bl	8001fd0 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fd ffd2 	bl	8001fd0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e207      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xc0>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fd ffc2 	bl	8001fd0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7fd ffbe 	bl	8001fd0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e1f3      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	4b51      	ldr	r3, [pc, #324]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0xe8>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407e:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e1c7      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4937      	ldr	r1, [pc, #220]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	e03a      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCC_OscConfig+0x244>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fd ff77 	bl	8001fd0 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e6:	f7fd ff73 	bl	8001fd0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1a8      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4925      	ldr	r1, [pc, #148]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	e015      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x244>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd ff56 	bl	8001fd0 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004128:	f7fd ff52 	bl	8001fd0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e187      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d036      	beq.n	80041c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <HAL_RCC_OscConfig+0x248>)
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd ff36 	bl	8001fd0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004168:	f7fd ff32 	bl	8001fd0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e167      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x200>
 8004186:	e01b      	b.n	80041c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_OscConfig+0x248>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fd ff1f 	bl	8001fd0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	e00e      	b.n	80041b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fd ff1b 	bl	8001fd0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d907      	bls.n	80041b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e150      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470000 	.word	0x42470000
 80041b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	4b88      	ldr	r3, [pc, #544]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1ea      	bne.n	8004196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8097 	beq.w	80042fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b81      	ldr	r3, [pc, #516]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	4b7d      	ldr	r3, [pc, #500]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a7c      	ldr	r2, [pc, #496]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b7a      	ldr	r3, [pc, #488]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	4b77      	ldr	r3, [pc, #476]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d118      	bne.n	800423c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420a:	4b74      	ldr	r3, [pc, #464]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a73      	ldr	r2, [pc, #460]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7fd fedb 	bl	8001fd0 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fd fed7 	bl	8001fd0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e10c      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x2ea>
 8004244:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a63      	ldr	r2, [pc, #396]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	e01c      	b.n	800428c <HAL_RCC_OscConfig+0x324>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b05      	cmp	r3, #5
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x30c>
 800425a:	4b5f      	ldr	r3, [pc, #380]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a5e      	ldr	r2, [pc, #376]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004260:	f043 0304 	orr.w	r3, r3, #4
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	4b5c      	ldr	r3, [pc, #368]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a5b      	ldr	r2, [pc, #364]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0x324>
 8004274:	4b58      	ldr	r3, [pc, #352]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a57      	ldr	r2, [pc, #348]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a54      	ldr	r2, [pc, #336]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004286:	f023 0304 	bic.w	r3, r3, #4
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd fe9c 	bl	8001fd0 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fd fe98 	bl	8001fd0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e0cb      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ee      	beq.n	800429c <HAL_RCC_OscConfig+0x334>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fd fe86 	bl	8001fd0 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fd fe82 	bl	8001fd0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0b5      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1ee      	bne.n	80042c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f0:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a1 	beq.w	8004448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b08      	cmp	r3, #8
 8004310:	d05c      	beq.n	80043cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d141      	bne.n	800439e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCC_OscConfig+0x478>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fd fe56 	bl	8001fd0 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fd fe52 	bl	8001fd0 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e087      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69da      	ldr	r2, [r3, #28]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	019b      	lsls	r3, r3, #6
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	085b      	lsrs	r3, r3, #1
 800435e:	3b01      	subs	r3, #1
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	491b      	ldr	r1, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x478>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fd fe2b 	bl	8001fd0 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd fe27 	bl	8001fd0 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e05c      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x416>
 800439c:	e054      	b.n	8004448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <HAL_RCC_OscConfig+0x478>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fd fe14 	bl	8001fd0 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fd fe10 	bl	8001fd0 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e045      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x444>
 80043ca:	e03d      	b.n	8004448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e038      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40007000 	.word	0x40007000
 80043e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d028      	beq.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d121      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d11a      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800441a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	4293      	cmp	r3, r2
 800441e:	d111      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d107      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800

08004458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0cc      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b68      	ldr	r3, [pc, #416]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d90c      	bls.n	8004494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b63      	ldr	r3, [pc, #396]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0b8      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ac:	4b59      	ldr	r3, [pc, #356]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a58      	ldr	r2, [pc, #352]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	494d      	ldr	r1, [pc, #308]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d044      	beq.n	8004578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d119      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d003      	beq.n	8004516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004512:	2b03      	cmp	r3, #3
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e067      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4934      	ldr	r1, [pc, #208]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004548:	f7fd fd42 	bl	8001fd0 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fd fd3e 	bl	8001fd0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e04f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 020c 	and.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1eb      	bne.n	8004550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d20c      	bcs.n	80045a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e032      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4916      	ldr	r1, [pc, #88]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	490e      	ldr	r1, [pc, #56]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045de:	f000 f821 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 80045f0:	5ccb      	ldrb	r3, [r1, r3]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd fca2 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40023c00 	.word	0x40023c00
 8004614:	40023800 	.word	0x40023800
 8004618:	080056a4 	.word	0x080056a4
 800461c:	20000008 	.word	0x20000008
 8004620:	20000014 	.word	0x20000014

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b090      	sub	sp, #64	; 0x40
 800462a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
 8004630:	2300      	movs	r3, #0
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004634:	2300      	movs	r3, #0
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463c:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d00d      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x40>
 8004648:	2b08      	cmp	r3, #8
 800464a:	f200 80a1 	bhi.w	8004790 <HAL_RCC_GetSysClockFreq+0x16c>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x34>
 8004652:	2b04      	cmp	r3, #4
 8004654:	d003      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x3a>
 8004656:	e09b      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800465c:	e09b      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465e:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004662:	e098      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004664:	4b4f      	ldr	r3, [pc, #316]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466e:	4b4d      	ldr	r3, [pc, #308]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d028      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	2200      	movs	r2, #0
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	627a      	str	r2, [r7, #36]	; 0x24
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800468c:	2100      	movs	r1, #0
 800468e:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004690:	fb03 f201 	mul.w	r2, r3, r1
 8004694:	2300      	movs	r3, #0
 8004696:	fb00 f303 	mul.w	r3, r0, r3
 800469a:	4413      	add	r3, r2
 800469c:	4a43      	ldr	r2, [pc, #268]	; (80047ac <HAL_RCC_GetSysClockFreq+0x188>)
 800469e:	fba0 1202 	umull	r1, r2, r0, r2
 80046a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a4:	460a      	mov	r2, r1
 80046a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80046a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046aa:	4413      	add	r3, r2
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b0:	2200      	movs	r2, #0
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	61fa      	str	r2, [r7, #28]
 80046b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046be:	f7fb fd8b 	bl	80001d8 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4613      	mov	r3, r2
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ca:	e053      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046cc:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	099b      	lsrs	r3, r3, #6
 80046d2:	2200      	movs	r2, #0
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	617a      	str	r2, [r7, #20]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046de:	f04f 0b00 	mov.w	fp, #0
 80046e2:	4652      	mov	r2, sl
 80046e4:	465b      	mov	r3, fp
 80046e6:	f04f 0000 	mov.w	r0, #0
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	0159      	lsls	r1, r3, #5
 80046f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f4:	0150      	lsls	r0, r2, #5
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	ebb2 080a 	subs.w	r8, r2, sl
 80046fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800470e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004716:	ebb2 0408 	subs.w	r4, r2, r8
 800471a:	eb63 0509 	sbc.w	r5, r3, r9
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	00eb      	lsls	r3, r5, #3
 8004728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800472c:	00e2      	lsls	r2, r4, #3
 800472e:	4614      	mov	r4, r2
 8004730:	461d      	mov	r5, r3
 8004732:	eb14 030a 	adds.w	r3, r4, sl
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	eb45 030b 	adc.w	r3, r5, fp
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800474a:	4629      	mov	r1, r5
 800474c:	028b      	lsls	r3, r1, #10
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004754:	4621      	mov	r1, r4
 8004756:	028a      	lsls	r2, r1, #10
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	2200      	movs	r2, #0
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	60fa      	str	r2, [r7, #12]
 8004764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004768:	f7fb fd36 	bl	80001d8 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	3301      	adds	r3, #1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800478e:	e002      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004798:	4618      	mov	r0, r3
 800479a:	3740      	adds	r7, #64	; 0x40
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	00f42400 	.word	0x00f42400
 80047ac:	017d7840 	.word	0x017d7840

080047b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000008 	.word	0x20000008

080047c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047cc:	f7ff fff0 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0a9b      	lsrs	r3, r3, #10
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4903      	ldr	r1, [pc, #12]	; (80047ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40023800 	.word	0x40023800
 80047ec:	080056b4 	.word	0x080056b4

080047f0 <__libc_init_array>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	4d0d      	ldr	r5, [pc, #52]	; (8004828 <__libc_init_array+0x38>)
 80047f4:	4c0d      	ldr	r4, [pc, #52]	; (800482c <__libc_init_array+0x3c>)
 80047f6:	1b64      	subs	r4, r4, r5
 80047f8:	10a4      	asrs	r4, r4, #2
 80047fa:	2600      	movs	r6, #0
 80047fc:	42a6      	cmp	r6, r4
 80047fe:	d109      	bne.n	8004814 <__libc_init_array+0x24>
 8004800:	4d0b      	ldr	r5, [pc, #44]	; (8004830 <__libc_init_array+0x40>)
 8004802:	4c0c      	ldr	r4, [pc, #48]	; (8004834 <__libc_init_array+0x44>)
 8004804:	f000 f87c 	bl	8004900 <_init>
 8004808:	1b64      	subs	r4, r4, r5
 800480a:	10a4      	asrs	r4, r4, #2
 800480c:	2600      	movs	r6, #0
 800480e:	42a6      	cmp	r6, r4
 8004810:	d105      	bne.n	800481e <__libc_init_array+0x2e>
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	f855 3b04 	ldr.w	r3, [r5], #4
 8004818:	4798      	blx	r3
 800481a:	3601      	adds	r6, #1
 800481c:	e7ee      	b.n	80047fc <__libc_init_array+0xc>
 800481e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004822:	4798      	blx	r3
 8004824:	3601      	adds	r6, #1
 8004826:	e7f2      	b.n	800480e <__libc_init_array+0x1e>
 8004828:	080056f4 	.word	0x080056f4
 800482c:	080056f4 	.word	0x080056f4
 8004830:	080056f4 	.word	0x080056f4
 8004834:	080056f8 	.word	0x080056f8

08004838 <__itoa>:
 8004838:	1e93      	subs	r3, r2, #2
 800483a:	2b22      	cmp	r3, #34	; 0x22
 800483c:	b510      	push	{r4, lr}
 800483e:	460c      	mov	r4, r1
 8004840:	d904      	bls.n	800484c <__itoa+0x14>
 8004842:	2300      	movs	r3, #0
 8004844:	700b      	strb	r3, [r1, #0]
 8004846:	461c      	mov	r4, r3
 8004848:	4620      	mov	r0, r4
 800484a:	bd10      	pop	{r4, pc}
 800484c:	2a0a      	cmp	r2, #10
 800484e:	d109      	bne.n	8004864 <__itoa+0x2c>
 8004850:	2800      	cmp	r0, #0
 8004852:	da07      	bge.n	8004864 <__itoa+0x2c>
 8004854:	232d      	movs	r3, #45	; 0x2d
 8004856:	700b      	strb	r3, [r1, #0]
 8004858:	4240      	negs	r0, r0
 800485a:	2101      	movs	r1, #1
 800485c:	4421      	add	r1, r4
 800485e:	f000 f80d 	bl	800487c <__utoa>
 8004862:	e7f1      	b.n	8004848 <__itoa+0x10>
 8004864:	2100      	movs	r1, #0
 8004866:	e7f9      	b.n	800485c <__itoa+0x24>

08004868 <itoa>:
 8004868:	f7ff bfe6 	b.w	8004838 <__itoa>

0800486c <memset>:
 800486c:	4402      	add	r2, r0
 800486e:	4603      	mov	r3, r0
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	f803 1b01 	strb.w	r1, [r3], #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <__utoa>:
 800487c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487e:	4c1f      	ldr	r4, [pc, #124]	; (80048fc <__utoa+0x80>)
 8004880:	b08b      	sub	sp, #44	; 0x2c
 8004882:	4605      	mov	r5, r0
 8004884:	460b      	mov	r3, r1
 8004886:	466e      	mov	r6, sp
 8004888:	f104 0c20 	add.w	ip, r4, #32
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	6861      	ldr	r1, [r4, #4]
 8004890:	4637      	mov	r7, r6
 8004892:	c703      	stmia	r7!, {r0, r1}
 8004894:	3408      	adds	r4, #8
 8004896:	4564      	cmp	r4, ip
 8004898:	463e      	mov	r6, r7
 800489a:	d1f7      	bne.n	800488c <__utoa+0x10>
 800489c:	7921      	ldrb	r1, [r4, #4]
 800489e:	7139      	strb	r1, [r7, #4]
 80048a0:	1e91      	subs	r1, r2, #2
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	6038      	str	r0, [r7, #0]
 80048a6:	2922      	cmp	r1, #34	; 0x22
 80048a8:	f04f 0100 	mov.w	r1, #0
 80048ac:	d904      	bls.n	80048b8 <__utoa+0x3c>
 80048ae:	7019      	strb	r1, [r3, #0]
 80048b0:	460b      	mov	r3, r1
 80048b2:	4618      	mov	r0, r3
 80048b4:	b00b      	add	sp, #44	; 0x2c
 80048b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b8:	1e58      	subs	r0, r3, #1
 80048ba:	4684      	mov	ip, r0
 80048bc:	fbb5 f7f2 	udiv	r7, r5, r2
 80048c0:	fb02 5617 	mls	r6, r2, r7, r5
 80048c4:	3628      	adds	r6, #40	; 0x28
 80048c6:	446e      	add	r6, sp
 80048c8:	460c      	mov	r4, r1
 80048ca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80048ce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80048d2:	462e      	mov	r6, r5
 80048d4:	42b2      	cmp	r2, r6
 80048d6:	f101 0101 	add.w	r1, r1, #1
 80048da:	463d      	mov	r5, r7
 80048dc:	d9ee      	bls.n	80048bc <__utoa+0x40>
 80048de:	2200      	movs	r2, #0
 80048e0:	545a      	strb	r2, [r3, r1]
 80048e2:	1919      	adds	r1, r3, r4
 80048e4:	1aa5      	subs	r5, r4, r2
 80048e6:	42aa      	cmp	r2, r5
 80048e8:	dae3      	bge.n	80048b2 <__utoa+0x36>
 80048ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80048ee:	780e      	ldrb	r6, [r1, #0]
 80048f0:	7006      	strb	r6, [r0, #0]
 80048f2:	3201      	adds	r2, #1
 80048f4:	f801 5901 	strb.w	r5, [r1], #-1
 80048f8:	e7f4      	b.n	80048e4 <__utoa+0x68>
 80048fa:	bf00      	nop
 80048fc:	080056c4 	.word	0x080056c4

08004900 <_init>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	bf00      	nop
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr

0800490c <_fini>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr
