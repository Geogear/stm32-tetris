
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056fc  080056fc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005704  08005704  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800570c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  2000001c  08005728  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08005728  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af12  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f62  00000000  00000000  0002af5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017016  00000000  00000000  0002e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3a5  00000000  00000000  000452b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091067  00000000  00000000  0005265b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e36c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f0  00000000  00000000  000e3714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004918 	.word	0x08004918

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08004918 	.word	0x08004918

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 fd1b 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f8e7 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9fb 	bl	80008e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ee:	f000 f9ab 	bl	8000848 <MX_I2C1_Init>
  MX_DMA_Init();
 80004f2:	f000 f9d7 	bl	80008a4 <MX_DMA_Init>
  MX_ADC1_Init();
 80004f6:	f000 f947 	bl	8000788 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(SSD1306_Init () == 0){
 80004fa:	f000 fa59 	bl	80009b0 <SSD1306_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d11a      	bne.n	800053a <main+0x5e>
		for(uint8_t i = 0; i < 10; ++i){
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e014      	b.n	8000534 <main+0x58>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	4860      	ldr	r0, [pc, #384]	; (8000694 <main+0x1b8>)
 8000512:	f002 ffa1 	bl	8003458 <HAL_GPIO_WritePin>
			HAL_Delay (100);
 8000516:	2064      	movs	r0, #100	; 0x64
 8000518:	f001 fd72 	bl	8002000 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	485c      	ldr	r0, [pc, #368]	; (8000694 <main+0x1b8>)
 8000524:	f002 ff98 	bl	8003458 <HAL_GPIO_WritePin>
			HAL_Delay (100);
 8000528:	2064      	movs	r0, #100	; 0x64
 800052a:	f001 fd69 	bl	8002000 <HAL_Delay>
		for(uint8_t i = 0; i < 10; ++i){
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	3301      	adds	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b09      	cmp	r3, #9
 8000538:	d9e7      	bls.n	800050a <main+0x2e>
		}
	}
	  rng_seed(HAL_GetTick());
 800053a:	f001 fd55 	bl	8001fe8 <HAL_GetTick>
 800053e:	4603      	mov	r3, r0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fb7f 	bl	8001c44 <rng_seed>
	  HAL_StatusTypeDef status = HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8000546:	2202      	movs	r2, #2
 8000548:	4953      	ldr	r1, [pc, #332]	; (8000698 <main+0x1bc>)
 800054a:	4854      	ldr	r0, [pc, #336]	; (800069c <main+0x1c0>)
 800054c:	f001 fdc0 	bl	80020d0 <HAL_ADC_Start_DMA>
 8000550:	4603      	mov	r3, r0
 8000552:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  uint32_t last_input_time = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
	  uint32_t input_interval = 250;
 8000558:	23fa      	movs	r3, #250	; 0xfa
 800055a:	603b      	str	r3, [r7, #0]
	  enum GAME_STATE cur_state = START;
 800055c:	2300      	movs	r3, #0
 800055e:	71fb      	strb	r3, [r7, #7]
	  enum SM_MOVE move;
	  static char score_buf[12] = {0};
	  uint8_t game_ended = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	717b      	strb	r3, [r7, #5]
  while (1)
  {
	  move = NO_INPUT;
 8000564:	2304      	movs	r3, #4
 8000566:	71bb      	strb	r3, [r7, #6]

	  if(last_input_time + input_interval < HAL_GetTick()){
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	18d4      	adds	r4, r2, r3
 800056e:	f001 fd3b 	bl	8001fe8 <HAL_GetTick>
 8000572:	4603      	mov	r3, r0
 8000574:	429c      	cmp	r4, r3
 8000576:	d221      	bcs.n	80005bc <main+0xe0>
		  last_input_time = HAL_GetTick();
 8000578:	f001 fd36 	bl	8001fe8 <HAL_GetTick>
 800057c:	60b8      	str	r0, [r7, #8]
		  if(VR[1] > 3900){
 800057e:	4b46      	ldr	r3, [pc, #280]	; (8000698 <main+0x1bc>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000586:	4293      	cmp	r3, r2
 8000588:	d902      	bls.n	8000590 <main+0xb4>
			  move = ROTATE;
 800058a:	2303      	movs	r3, #3
 800058c:	71bb      	strb	r3, [r7, #6]
 800058e:	e015      	b.n	80005bc <main+0xe0>
		  }else if(VR[1] < 200){
 8000590:	4b41      	ldr	r3, [pc, #260]	; (8000698 <main+0x1bc>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	2bc7      	cmp	r3, #199	; 0xc7
 8000596:	d802      	bhi.n	800059e <main+0xc2>
			  move = DOWN;
 8000598:	2302      	movs	r3, #2
 800059a:	71bb      	strb	r3, [r7, #6]
 800059c:	e00e      	b.n	80005bc <main+0xe0>
		  }else if(VR[0] > 3900){
 800059e:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <main+0x1bc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f640 723c 	movw	r2, #3900	; 0xf3c
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d902      	bls.n	80005b0 <main+0xd4>
			  move = LEFT;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	e005      	b.n	80005bc <main+0xe0>
		  }else if(VR[0] < 200){
 80005b0:	4b39      	ldr	r3, [pc, #228]	; (8000698 <main+0x1bc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2bc7      	cmp	r3, #199	; 0xc7
 80005b6:	d801      	bhi.n	80005bc <main+0xe0>
			  move = RIGHT;
 80005b8:	2301      	movs	r3, #1
 80005ba:	71bb      	strb	r3, [r7, #6]
		  }
	  }

	  if(cur_state == START){
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d122      	bne.n	8000608 <main+0x12c>
		  if(game_ended){
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d003      	beq.n	80005d0 <main+0xf4>
			  game_ended = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	717b      	strb	r3, [r7, #5]
			  SSD1306_Clear();
 80005cc:	f000 fc6f 	bl	8000eae <SSD1306_Clear>
		  }
		  SSD1306_GotoXY (10,10); // goto 10, 10
 80005d0:	210a      	movs	r1, #10
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fbb0 	bl	8000d38 <SSD1306_GotoXY>
		  SSD1306_Puts ("MINI", &Font_11x18, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	4931      	ldr	r1, [pc, #196]	; (80006a0 <main+0x1c4>)
 80005dc:	4831      	ldr	r0, [pc, #196]	; (80006a4 <main+0x1c8>)
 80005de:	f000 fc41 	bl	8000e64 <SSD1306_Puts>
		  SSD1306_GotoXY (10, 30);
 80005e2:	211e      	movs	r1, #30
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fba7 	bl	8000d38 <SSD1306_GotoXY>
		  SSD1306_Puts ("TETRIS", &Font_11x18, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	492c      	ldr	r1, [pc, #176]	; (80006a0 <main+0x1c4>)
 80005ee:	482e      	ldr	r0, [pc, #184]	; (80006a8 <main+0x1cc>)
 80005f0:	f000 fc38 	bl	8000e64 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen*/
 80005f4:	f000 faf2 	bl	8000bdc <SSD1306_UpdateScreen>
		  if(move != NO_INPUT){
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d0b2      	beq.n	8000564 <main+0x88>
			  init_game();
 80005fe:	f001 fc39 	bl	8001e74 <init_game>
			  cur_state = RUNNING;
 8000602:	2301      	movs	r3, #1
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	e7ad      	b.n	8000564 <main+0x88>
		  }
	  }else if(cur_state == RUNNING){
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d106      	bne.n	800061c <main+0x140>
		  cur_state = game_iteration(move);
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fb9d 	bl	8001d50 <game_iteration>
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e7a3      	b.n	8000564 <main+0x88>
	  }else if(cur_state == LOST){
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d12f      	bne.n	8000682 <main+0x1a6>
		  cur_state = ENDED;
 8000622:	2303      	movs	r3, #3
 8000624:	71fb      	strb	r3, [r7, #7]
		  SSD1306_GotoXY (10,10); // goto 10, 10
 8000626:	210a      	movs	r1, #10
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fb85 	bl	8000d38 <SSD1306_GotoXY>
		  SSD1306_Puts ("GAME OVER!", &Font_11x18, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	491b      	ldr	r1, [pc, #108]	; (80006a0 <main+0x1c4>)
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x1d0>)
 8000634:	f000 fc16 	bl	8000e64 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen*/
 8000638:	f000 fad0 	bl	8000bdc <SSD1306_UpdateScreen>
		  HAL_Delay (2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000640:	f001 fcde 	bl	8002000 <HAL_Delay>
		  SSD1306_Clear();
 8000644:	f000 fc33 	bl	8000eae <SSD1306_Clear>
		  SSD1306_GotoXY (10,10); // goto 10, 10
 8000648:	210a      	movs	r1, #10
 800064a:	200a      	movs	r0, #10
 800064c:	f000 fb74 	bl	8000d38 <SSD1306_GotoXY>
		  SSD1306_Puts ("YOUR SCORE", &Font_11x18, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	4913      	ldr	r1, [pc, #76]	; (80006a0 <main+0x1c4>)
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <main+0x1d4>)
 8000656:	f000 fc05 	bl	8000e64 <SSD1306_Puts>
		  SSD1306_GotoXY (10, 30);
 800065a:	211e      	movs	r1, #30
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fb6b 	bl	8000d38 <SSD1306_GotoXY>
		  itoa(get_score(), score_buf, 11);
 8000662:	f001 fbfb 	bl	8001e5c <get_score>
 8000666:	4603      	mov	r3, r0
 8000668:	220b      	movs	r2, #11
 800066a:	4912      	ldr	r1, [pc, #72]	; (80006b4 <main+0x1d8>)
 800066c:	4618      	mov	r0, r3
 800066e:	f004 f907 	bl	8004880 <itoa>
		  SSD1306_Puts (score_buf, &Font_11x18, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	490a      	ldr	r1, [pc, #40]	; (80006a0 <main+0x1c4>)
 8000676:	480f      	ldr	r0, [pc, #60]	; (80006b4 <main+0x1d8>)
 8000678:	f000 fbf4 	bl	8000e64 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen*/
 800067c:	f000 faae 	bl	8000bdc <SSD1306_UpdateScreen>
 8000680:	e770      	b.n	8000564 <main+0x88>
	  }else{
		  if(move != NO_INPUT)
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b04      	cmp	r3, #4
 8000686:	d001      	beq.n	800068c <main+0x1b0>
			  cur_state = START;
 8000688:	2300      	movs	r3, #0
 800068a:	71fb      	strb	r3, [r7, #7]
		  game_ended = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	717b      	strb	r3, [r7, #5]
	  move = NO_INPUT;
 8000690:	e768      	b.n	8000564 <main+0x88>
 8000692:	bf00      	nop
 8000694:	40020800 	.word	0x40020800
 8000698:	200004f4 	.word	0x200004f4
 800069c:	200004fc 	.word	0x200004fc
 80006a0:	20000000 	.word	0x20000000
 80006a4:	08004930 	.word	0x08004930
 80006a8:	08004938 	.word	0x08004938
 80006ac:	08004940 	.word	0x08004940
 80006b0:	0800494c 	.word	0x0800494c
 80006b4:	20000038 	.word	0x20000038

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f8dc 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <SystemClock_Config+0xc8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemClock_Config+0xc8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <SystemClock_Config+0xc8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SystemClock_Config+0xcc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <SystemClock_Config+0xcc>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <SystemClock_Config+0xcc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000728:	230c      	movs	r3, #12
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800072c:	2360      	movs	r3, #96	; 0x60
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fc1f 	bl	8003f80 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f92c 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2103      	movs	r1, #3
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fe81 	bl	8004470 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000774:	f000 f916 	bl	80009a4 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	; 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC1_Init+0xb4>)
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <MX_ADC1_Init+0xb8>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC1_Init+0xb4>)
 80007a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC1_Init+0xb4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_ADC1_Init+0xb4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ADC1_Init+0xb4>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC1_Init+0xb4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC1_Init+0xb4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_ADC1_Init+0xb4>)
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_ADC1_Init+0xbc>)
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC1_Init+0xb4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_ADC1_Init+0xb4>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ADC1_Init+0xb4>)
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_ADC1_Init+0xb4>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_ADC1_Init+0xb4>)
 80007ea:	f001 fc2d 	bl	8002048 <HAL_ADC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007f4:	f000 f8d6 	bl	80009a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000800:	2306      	movs	r3, #6
 8000802:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_ADC1_Init+0xb4>)
 800080a:	f001 fd6f 	bl	80022ec <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000814:	f000 f8c6 	bl	80009a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000818:	2302      	movs	r3, #2
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC1_Init+0xb4>)
 8000826:	f001 fd61 	bl	80022ec <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000830:	f000 f8b8 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200004fc 	.word	0x200004fc
 8000840:	40012000 	.word	0x40012000
 8000844:	0f000001 	.word	0x0f000001

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C1_Init+0x50>)
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <MX_I2C1_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2C1_Init+0x50>)
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x58>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_I2C1_Init+0x50>)
 8000866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_I2C1_Init+0x50>)
 8000886:	f002 fe01 	bl	800348c <HAL_I2C_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000890:	f000 f888 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200004a0 	.word	0x200004a0
 800089c:	40005400 	.word	0x40005400
 80008a0:	00061a80 	.word	0x00061a80

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2038      	movs	r0, #56	; 0x38
 80008cc:	f002 f899 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d0:	2038      	movs	r0, #56	; 0x38
 80008d2:	f002 f8b2 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_GPIO_Init+0xb8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a26      	ldr	r2, [pc, #152]	; (800099c <MX_GPIO_Init+0xb8>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_GPIO_Init+0xb8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_GPIO_Init+0xb8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <MX_GPIO_Init+0xb8>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_GPIO_Init+0xb8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_GPIO_Init+0xb8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <MX_GPIO_Init+0xb8>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_GPIO_Init+0xb8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_GPIO_Init+0xb8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <MX_GPIO_Init+0xb8>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_GPIO_Init+0xb8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0xbc>)
 8000972:	f002 fd71 	bl	8003458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0xbc>)
 8000990:	f002 fbde 	bl	8003150 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020800 	.word	0x40020800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80009b6:	f000 fa83 	bl	8000ec0 <ssd1306_I2C_Init>

	/* TODO I've added this. */
	for(uint16_t adr = 0; adr <= 255; ++adr){
 80009ba:	2300      	movs	r3, #0
 80009bc:	81fb      	strh	r3, [r7, #14]
 80009be:	e01b      	b.n	80009f8 <SSD1306_Init+0x48>
		HAL_StatusTypeDef ret_val = HAL_I2C_IsDeviceReady(&hi2c1, adr, 1, 20000);
 80009c0:	89f9      	ldrh	r1, [r7, #14]
 80009c2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009c6:	2201      	movs	r2, #1
 80009c8:	4881      	ldr	r0, [pc, #516]	; (8000bd0 <SSD1306_Init+0x220>)
 80009ca:	f002 ffa1 	bl	8003910 <HAL_I2C_IsDeviceReady>
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
		if(ret_val == HAL_OK){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <SSD1306_Init+0x32>
			real_adr = adr;
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b7d      	ldr	r3, [pc, #500]	; (8000bd4 <SSD1306_Init+0x224>)
 80009de:	701a      	strb	r2, [r3, #0]
			break;
 80009e0:	e00d      	b.n	80009fe <SSD1306_Init+0x4e>
		}
		else if(ret_val != HAL_OK && adr == 255)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d004      	beq.n	80009f2 <SSD1306_Init+0x42>
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	2bff      	cmp	r3, #255	; 0xff
 80009ec:	d101      	bne.n	80009f2 <SSD1306_Init+0x42>
			return 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e0e9      	b.n	8000bc6 <SSD1306_Init+0x216>
	for(uint16_t adr = 0; adr <= 255; ++adr){
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	3301      	adds	r3, #1
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	89fb      	ldrh	r3, [r7, #14]
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d9e0      	bls.n	80009c0 <SSD1306_Init+0x10>
		// Return false
		return 0;
	}*/

	/* A little delay */
	uint32_t p = 2500;
 80009fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a02:	60bb      	str	r3, [r7, #8]
	while(p>0)
 8000a04:	e002      	b.n	8000a0c <SSD1306_Init+0x5c>
		p--;
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
	while(p>0)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f9      	bne.n	8000a06 <SSD1306_Init+0x56>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a12:	4b70      	ldr	r3, [pc, #448]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	22ae      	movs	r2, #174	; 0xae
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 facc 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000a20:	4b6c      	ldr	r3, [pc, #432]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2220      	movs	r2, #32
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fac5 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a2e:	4b69      	ldr	r3, [pc, #420]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2210      	movs	r2, #16
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fabe 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a3c:	4b65      	ldr	r3, [pc, #404]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	22b0      	movs	r2, #176	; 0xb0
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fab7 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a4a:	4b62      	ldr	r3, [pc, #392]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	22c8      	movs	r2, #200	; 0xc8
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fab0 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a58:	4b5e      	ldr	r3, [pc, #376]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 faa9 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a66:	4b5b      	ldr	r3, [pc, #364]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 faa2 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a74:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2240      	movs	r2, #64	; 0x40
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fa9b 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a82:	4b54      	ldr	r3, [pc, #336]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2281      	movs	r2, #129	; 0x81
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fa94 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a90:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <SSD1306_Init+0x224>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fa8d 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <SSD1306_Init+0x224>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	22a1      	movs	r2, #161	; 0xa1
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fa86 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000aac:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <SSD1306_Init+0x224>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	22a6      	movs	r2, #166	; 0xa6
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fa7f 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000aba:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <SSD1306_Init+0x224>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	22a8      	movs	r2, #168	; 0xa8
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fa78 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ac8:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <SSD1306_Init+0x224>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	223f      	movs	r2, #63	; 0x3f
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fa71 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <SSD1306_Init+0x224>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	22a4      	movs	r2, #164	; 0xa4
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fa6a 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <SSD1306_Init+0x224>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	22d3      	movs	r2, #211	; 0xd3
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fa63 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <SSD1306_Init+0x224>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fa5c 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b00:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	22d5      	movs	r2, #213	; 0xd5
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fa55 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	22f0      	movs	r2, #240	; 0xf0
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fa4e 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	22d9      	movs	r2, #217	; 0xd9
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fa47 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2222      	movs	r2, #34	; 0x22
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fa40 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	22da      	movs	r2, #218	; 0xda
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fa39 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2212      	movs	r2, #18
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fa32 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	22db      	movs	r2, #219	; 0xdb
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fa2b 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2220      	movs	r2, #32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fa24 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	228d      	movs	r2, #141	; 0x8d
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fa1d 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2214      	movs	r2, #20
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fa16 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	22af      	movs	r2, #175	; 0xaf
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fa0f 	bl	8000fb8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <SSD1306_Init+0x224>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	222e      	movs	r2, #46	; 0x2e
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fa08 	bl	8000fb8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 f84d 	bl	8000c48 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000bae:	f000 f815 	bl	8000bdc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <SSD1306_Init+0x228>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <SSD1306_Init+0x228>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SSD1306_Init+0x228>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200004a0 	.word	0x200004a0
 8000bd4:	20000044 	.word	0x20000044
 8000bd8:	20000448 	.word	0x20000448

08000bdc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e023      	b.n	8000c30 <SSD1306_UpdateScreen+0x54>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <SSD1306_UpdateScreen+0x64>)
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3b50      	subs	r3, #80	; 0x50
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f000 f9df 	bl	8000fb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <SSD1306_UpdateScreen+0x64>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f9d8 	bl	8000fb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <SSD1306_UpdateScreen+0x64>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f9d1 	bl	8000fb8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(real_adr, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SSD1306_UpdateScreen+0x64>)
 8000c18:	7818      	ldrb	r0, [r3, #0]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	01db      	lsls	r3, r3, #7
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <SSD1306_UpdateScreen+0x68>)
 8000c20:	441a      	add	r2, r3
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	f000 f961 	bl	8000eec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	d9d8      	bls.n	8000be8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000044 	.word	0x20000044
 8000c44:	20000048 	.word	0x20000048

08000c48 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <SSD1306_Fill+0x14>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e000      	b.n	8000c5e <SSD1306_Fill+0x16>
 8000c5c:	23ff      	movs	r3, #255	; 0xff
 8000c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c62:	4619      	mov	r1, r3
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <SSD1306_Fill+0x2c>)
 8000c66:	f003 fe0d 	bl	8004884 <memset>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000048 	.word	0x20000048

08000c78 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	460b      	mov	r3, r1
 8000c84:	80bb      	strh	r3, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	70fb      	strb	r3, [r7, #3]
	if (
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c8e:	d848      	bhi.n	8000d22 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	2b3f      	cmp	r3, #63	; 0x3f
 8000c94:	d845      	bhi.n	8000d22 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <SSD1306_DrawPixel+0xb8>)
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d006      	beq.n	8000cac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d11a      	bne.n	8000ce8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	b298      	uxth	r0, r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	01db      	lsls	r3, r3, #7
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <SSD1306_DrawPixel+0xbc>)
 8000cc2:	5cd3      	ldrb	r3, [r2, r3]
 8000cc4:	b25a      	sxtb	r2, r3
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b259      	sxtb	r1, r3
 8000cd8:	88fa      	ldrh	r2, [r7, #6]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	01db      	lsls	r3, r3, #7
 8000cde:	4413      	add	r3, r2
 8000ce0:	b2c9      	uxtb	r1, r1
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <SSD1306_DrawPixel+0xbc>)
 8000ce4:	54d1      	strb	r1, [r2, r3]
 8000ce6:	e01d      	b.n	8000d24 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	01db      	lsls	r3, r3, #7
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <SSD1306_DrawPixel+0xbc>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	b25a      	sxtb	r2, r3
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	4013      	ands	r3, r2
 8000d10:	b259      	sxtb	r1, r3
 8000d12:	88fa      	ldrh	r2, [r7, #6]
 8000d14:	4603      	mov	r3, r0
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	4413      	add	r3, r2
 8000d1a:	b2c9      	uxtb	r1, r1
 8000d1c:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SSD1306_DrawPixel+0xbc>)
 8000d1e:	54d1      	strb	r1, [r2, r3]
 8000d20:	e000      	b.n	8000d24 <SSD1306_DrawPixel+0xac>
		return;
 8000d22:	bf00      	nop
	}
}
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000448 	.word	0x20000448
 8000d34:	20000048 	.word	0x20000048

08000d38 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	80fb      	strh	r3, [r7, #6]
 8000d44:	4613      	mov	r3, r2
 8000d46:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d48:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SSD1306_GotoXY+0x28>)
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <SSD1306_GotoXY+0x28>)
 8000d50:	88bb      	ldrh	r3, [r7, #4]
 8000d52:	8053      	strh	r3, [r2, #2]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20000448 	.word	0x20000448

08000d64 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d74:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
	if (
 8000d80:	2b7f      	cmp	r3, #127	; 0x7f
 8000d82:	dc07      	bgt.n	8000d94 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000d86:	885b      	ldrh	r3, [r3, #2]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d90:	2b3f      	cmp	r3, #63	; 0x3f
 8000d92:	dd01      	ble.n	8000d98 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e05e      	b.n	8000e56 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e04b      	b.n	8000e36 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	3b20      	subs	r3, #32
 8000da6:	6839      	ldr	r1, [r7, #0]
 8000da8:	7849      	ldrb	r1, [r1, #1]
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	440b      	add	r3, r1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	e030      	b.n	8000e24 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d010      	beq.n	8000df4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b298      	uxth	r0, r3
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000de0:	885a      	ldrh	r2, [r3, #2]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	4413      	add	r3, r2
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	79ba      	ldrb	r2, [r7, #6]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff ff43 	bl	8000c78 <SSD1306_DrawPixel>
 8000df2:	e014      	b.n	8000e1e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000df6:	881a      	ldrh	r2, [r3, #0]
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000e02:	885a      	ldrh	r2, [r3, #2]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf0c      	ite	eq
 8000e12:	2301      	moveq	r3, #1
 8000e14:	2300      	movne	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f7ff ff2d 	bl	8000c78 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	3301      	adds	r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d3c8      	bcc.n	8000dc2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d3ad      	bcc.n	8000d9e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000e44:	881a      	ldrh	r2, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <SSD1306_Putc+0xfc>)
 8000e52:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000448 	.word	0x20000448

08000e64 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000e72:	e012      	b.n	8000e9a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff71 	bl	8000d64 <SSD1306_Putc>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d002      	beq.n	8000e94 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	e008      	b.n	8000ea6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1e8      	bne.n	8000e74 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fec8 	bl	8000c48 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000eb8:	f7ff fe90 	bl	8000bdc <SSD1306_UpdateScreen>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <ssd1306_I2C_Init+0x28>)
 8000ec8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000eca:	e002      	b.n	8000ed2 <ssd1306_I2C_Init+0x12>
		p--;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f9      	bne.n	8000ecc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	0003d090 	.word	0x0003d090

08000eec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b0c7      	sub	sp, #284	; 0x11c
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000efa:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000efe:	600a      	str	r2, [r1, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f06:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f12:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f16:	4602      	mov	r2, r0
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f22:	460a      	mov	r2, r1
 8000f24:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f2e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f32:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f40:	e015      	b.n	8000f6e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f42:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f46:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f4a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	441a      	add	r2, r3
 8000f52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f56:	3301      	adds	r3, #1
 8000f58:	7811      	ldrb	r1, [r2, #0]
 8000f5a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f5e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f62:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f64:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f6e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f78:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000f7c:	8812      	ldrh	r2, [r2, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d8df      	bhi.n	8000f42 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f86:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f107 020c 	add.w	r2, r7, #12
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	9000      	str	r0, [sp, #0]
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000fa6:	f002 fbb5 	bl	8003714 <HAL_I2C_Master_Transmit>
}
 8000faa:	bf00      	nop
 8000fac:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	200004a0 	.word	0x200004a0

08000fb8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000fce:	797b      	ldrb	r3, [r7, #5]
 8000fd0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	f107 020c 	add.w	r2, r7, #12
 8000fda:	230a      	movs	r3, #10
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <ssd1306_I2C_Write+0x38>)
 8000fe2:	f002 fb97 	bl	8003714 <HAL_I2C_Master_Transmit>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200004a0 	.word	0x200004a0

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_MspInit+0x4c>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_ADC_MspInit+0xdc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d157      	bne.n	8001116 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_ADC_MspInit+0xe0>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a2d      	ldr	r2, [pc, #180]	; (8001124 <HAL_ADC_MspInit+0xe0>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_ADC_MspInit+0xe0>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b27      	ldr	r3, [pc, #156]	; (8001124 <HAL_ADC_MspInit+0xe0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_ADC_MspInit+0xe0>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_ADC_MspInit+0xe0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800109e:	2306      	movs	r3, #6
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	481d      	ldr	r0, [pc, #116]	; (8001128 <HAL_ADC_MspInit+0xe4>)
 80010b2:	f002 f84d 	bl	8003150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_ADC_MspInit+0xec>)
 80010ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <HAL_ADC_MspInit+0xe8>)
 80010fc:	f001 fcb8 	bl	8002a70 <HAL_DMA_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001106:	f7ff fc4d 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_ADC_MspInit+0xe8>)
 800110e:	639a      	str	r2, [r3, #56]	; 0x38
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_ADC_MspInit+0xe8>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40012000 	.word	0x40012000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	20000544 	.word	0x20000544
 8001130:	40026410 	.word	0x40026410

08001134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_I2C_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001172:	23c0      	movs	r3, #192	; 0xc0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001182:	2304      	movs	r3, #4
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <HAL_I2C_MspInit+0x8c>)
 800118e:	f001 ffdf 	bl	8003150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_I2C_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_I2C_MspInit+0x88>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_I2C_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 fed6 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA2_Stream0_IRQHandler+0x10>)
 800121e:	f001 fd2d 	bl	8002c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000544 	.word	0x20000544

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <tetris_set>:
static uint32_t rng_state = 0x31;
static uint32_t last_time = 0;
static uint32_t interval = 500;
static uint32_t score = 0;

static inline void tetris_set(uint8_t y, uint8_t x){
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
	map[y] = map[y] ^ (0x1 << x);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <tetris_set+0x40>)
 8001264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001268:	b21a      	sxth	r2, r3
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	b21b      	sxth	r3, r3
 8001274:	4053      	eors	r3, r2
 8001276:	b21a      	sxth	r2, r3
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	b291      	uxth	r1, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <tetris_set+0x40>)
 800127e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000450 	.word	0x20000450

08001294 <tetris_get>:

static inline uint8_t tetris_get(uint8_t y, uint8_t x){
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	460a      	mov	r2, r1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71bb      	strb	r3, [r7, #6]
	return (map[y] >> x) & 0x1;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <tetris_get+0x34>)
 80012a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ac:	461a      	mov	r2, r3
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	fa42 f303 	asr.w	r3, r2, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	20000450 	.word	0x20000450

080012cc <sm_bottom_hits>:

static void sm_get_borders(uint8_t* y, uint8_t* x_left, uint8_t* x_right){
	//TODO
}

static uint8_t sm_bottom_hits(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
		}
	}

	return hits;*/

	uint8_t bottom_y = 100;
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	71fb      	strb	r3, [r7, #7]
	if(sm_cur.row4 != 0){
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <sm_bottom_hits+0x10c>)
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	f023 030f 	bic.w	r3, r3, #15
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <sm_bottom_hits+0x1e>
		bottom_y = 3;
 80012e4:	2303      	movs	r3, #3
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	e015      	b.n	8001316 <sm_bottom_hits+0x4a>
	}else if(sm_cur.row3 != 0){
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <sm_bottom_hits+0x10c>)
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <sm_bottom_hits+0x32>
		bottom_y = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	e00b      	b.n	8001316 <sm_bottom_hits+0x4a>
	}else if(sm_cur.row2 != 0){
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <sm_bottom_hits+0x10c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f023 030f 	bic.w	r3, r3, #15
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <sm_bottom_hits+0x46>
		bottom_y = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	e001      	b.n	8001316 <sm_bottom_hits+0x4a>
	}else{
		bottom_y = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
	}

	if(sm_cur_y + bottom_y == TETRIS_ROW-1)
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <sm_bottom_hits+0x110>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4413      	add	r3, r2
 8001320:	2b1f      	cmp	r3, #31
 8001322:	d101      	bne.n	8001328 <sm_bottom_hits+0x5c>
		return 1;
 8001324:	2301      	movs	r3, #1
 8001326:	e053      	b.n	80013d0 <sm_bottom_hits+0x104>

	uint8_t blocked = 0, pixel_below = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	71bb      	strb	r3, [r7, #6]
 800132c:	2300      	movs	r3, #0
 800132e:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < 4; ++i){
 8001330:	2300      	movs	r3, #0
 8001332:	713b      	strb	r3, [r7, #4]
 8001334:	e046      	b.n	80013c4 <sm_bottom_hits+0xf8>
		for(uint8_t j = 0; j < 4; ++j){
 8001336:	2300      	movs	r3, #0
 8001338:	70fb      	strb	r3, [r7, #3]
 800133a:	e03a      	b.n	80013b2 <sm_bottom_hits+0xe6>
			uint8_t bit = sm_get(&sm_cur, i ,j);
 800133c:	78fa      	ldrb	r2, [r7, #3]
 800133e:	793b      	ldrb	r3, [r7, #4]
 8001340:	4619      	mov	r1, r3
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <sm_bottom_hits+0x10c>)
 8001344:	f000 f97c 	bl	8001640 <sm_get>
 8001348:	4603      	mov	r3, r0
 800134a:	70bb      	strb	r3, [r7, #2]
			if(bit && i != 3){
 800134c:	78bb      	ldrb	r3, [r7, #2]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00c      	beq.n	800136c <sm_bottom_hits+0xa0>
 8001352:	793b      	ldrb	r3, [r7, #4]
 8001354:	2b03      	cmp	r3, #3
 8001356:	d009      	beq.n	800136c <sm_bottom_hits+0xa0>
				pixel_below = sm_get(&sm_cur, i+1 ,j);
 8001358:	793b      	ldrb	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	4619      	mov	r1, r3
 8001362:	481d      	ldr	r0, [pc, #116]	; (80013d8 <sm_bottom_hits+0x10c>)
 8001364:	f000 f96c 	bl	8001640 <sm_get>
 8001368:	4603      	mov	r3, r0
 800136a:	717b      	strb	r3, [r7, #5]
			}
			if(bit && (i == 3 || !pixel_below)){
 800136c:	78bb      	ldrb	r3, [r7, #2]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01c      	beq.n	80013ac <sm_bottom_hits+0xe0>
 8001372:	793b      	ldrb	r3, [r7, #4]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d002      	beq.n	800137e <sm_bottom_hits+0xb2>
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <sm_bottom_hits+0xe0>
				uint8_t pos_x = sm_cur_x + j;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <sm_bottom_hits+0x114>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	4413      	add	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
				if(tetris_get(sm_cur_y + i + 1, pos_x)){
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <sm_bottom_hits+0x110>)
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	793b      	ldrb	r3, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3301      	adds	r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	787a      	ldrb	r2, [r7, #1]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff7a 	bl	8001294 <tetris_get>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <sm_bottom_hits+0xe0>
					blocked = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	71bb      	strb	r3, [r7, #6]
					break;
 80013aa:	e005      	b.n	80013b8 <sm_bottom_hits+0xec>
		for(uint8_t j = 0; j < 4; ++j){
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	3301      	adds	r3, #1
 80013b0:	70fb      	strb	r3, [r7, #3]
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d9c1      	bls.n	800133c <sm_bottom_hits+0x70>
				}
			}
		}
		if(blocked)
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <sm_bottom_hits+0x100>
	for(uint8_t i = 0; i < 4; ++i){
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	3301      	adds	r3, #1
 80013c2:	713b      	strb	r3, [r7, #4]
 80013c4:	793b      	ldrb	r3, [r7, #4]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d9b5      	bls.n	8001336 <sm_bottom_hits+0x6a>
 80013ca:	e000      	b.n	80013ce <sm_bottom_hits+0x102>
			break;
 80013cc:	bf00      	nop
	}
	return blocked;
 80013ce:	79bb      	ldrb	r3, [r7, #6]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000490 	.word	0x20000490
 80013dc:	20000492 	.word	0x20000492
 80013e0:	20000493 	.word	0x20000493

080013e4 <sm_set_shape>:

void sm_set_shape(union shape_map* sm, enum SHAPE shape, uint8_t take_mirror){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
 80013f0:	4613      	mov	r3, r2
 80013f2:	70bb      	strb	r3, [r7, #2]
	sm->val = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	801a      	strh	r2, [r3, #0]
	switch(shape){
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d871      	bhi.n	80014e4 <sm_set_shape+0x100>
 8001400:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <sm_set_shape+0x24>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	0800141d 	.word	0x0800141d
 800140c:	08001447 	.word	0x08001447
 8001410:	08001467 	.word	0x08001467
 8001414:	08001491 	.word	0x08001491
 8001418:	080014bb 	.word	0x080014bb
		case SQUARE:
			sm_set(sm, 0, 0); sm_set(sm, 0, 1); // first row
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f891 	bl	8001548 <sm_set>
 8001426:	2201      	movs	r2, #1
 8001428:	2100      	movs	r1, #0
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f88c 	bl	8001548 <sm_set>
			sm_set(sm, 1, 0); sm_set(sm, 1, 1); // second row
 8001430:	2200      	movs	r2, #0
 8001432:	2101      	movs	r1, #1
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f887 	bl	8001548 <sm_set>
 800143a:	2201      	movs	r2, #1
 800143c:	2101      	movs	r1, #1
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f882 	bl	8001548 <sm_set>
			break;
 8001444:	e04e      	b.n	80014e4 <sm_set_shape+0x100>
		case ROD:
			for(uint8_t i = 0; i < 4; ++i)
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e008      	b.n	800145e <sm_set_shape+0x7a>
				sm_set(sm, i, 0); // always at first column and go down the rows
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f878 	bl	8001548 <sm_set>
			for(uint8_t i = 0; i < 4; ++i)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3301      	adds	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d9f3      	bls.n	800144c <sm_set_shape+0x68>
			break;
 8001464:	e03e      	b.n	80014e4 <sm_set_shape+0x100>
		case Z_BLOCK:
				sm_set(sm, 0, 0); sm_set(sm, 0, 1);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f86c 	bl	8001548 <sm_set>
 8001470:	2201      	movs	r2, #1
 8001472:	2100      	movs	r1, #0
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f867 	bl	8001548 <sm_set>
				sm_set(sm, 1, 1); sm_set(sm, 1, 2);
 800147a:	2201      	movs	r2, #1
 800147c:	2101      	movs	r1, #1
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f862 	bl	8001548 <sm_set>
 8001484:	2202      	movs	r2, #2
 8001486:	2101      	movs	r1, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f85d 	bl	8001548 <sm_set>
			break;
 800148e:	e029      	b.n	80014e4 <sm_set_shape+0x100>
		case L_BLOCK:
			for(uint8_t i = 0; i < 4; ++i)
 8001490:	2300      	movs	r3, #0
 8001492:	73bb      	strb	r3, [r7, #14]
 8001494:	e008      	b.n	80014a8 <sm_set_shape+0xc4>
				sm_set(sm, i, 0);
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f853 	bl	8001548 <sm_set>
			for(uint8_t i = 0; i < 4; ++i)
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73bb      	strb	r3, [r7, #14]
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d9f3      	bls.n	8001496 <sm_set_shape+0xb2>
			sm_set(sm, 3, 1);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2103      	movs	r1, #3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f848 	bl	8001548 <sm_set>
			break;
 80014b8:	e014      	b.n	80014e4 <sm_set_shape+0x100>
		case T_BLOCK:
			for(uint8_t i = 0; i < 3; ++i)
 80014ba:	2300      	movs	r3, #0
 80014bc:	737b      	strb	r3, [r7, #13]
 80014be:	e008      	b.n	80014d2 <sm_set_shape+0xee>
				sm_set(sm, 0, i); // fill the first 3 colum on the first row
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	461a      	mov	r2, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f83e 	bl	8001548 <sm_set>
			for(uint8_t i = 0; i < 3; ++i)
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	3301      	adds	r3, #1
 80014d0:	737b      	strb	r3, [r7, #13]
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d9f3      	bls.n	80014c0 <sm_set_shape+0xdc>
			sm_set(sm, 1, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	2101      	movs	r1, #1
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f833 	bl	8001548 <sm_set>
			break;
 80014e2:	bf00      	nop
	}

	if(take_mirror){
 80014e4:	78bb      	ldrb	r3, [r7, #2]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d02a      	beq.n	8001540 <sm_set_shape+0x15c>
		union shape_map take_inverse;
		take_inverse.val = sm->val;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	813b      	strh	r3, [r7, #8]
		sm->val = 0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < 4; ++i){
 80014f6:	2300      	movs	r3, #0
 80014f8:	733b      	strb	r3, [r7, #12]
 80014fa:	e01e      	b.n	800153a <sm_set_shape+0x156>
			for(uint8_t j = 0; j < 4; ++j){
 80014fc:	2300      	movs	r3, #0
 80014fe:	72fb      	strb	r3, [r7, #11]
 8001500:	e015      	b.n	800152e <sm_set_shape+0x14a>
				// If there is a set pixel value on the coord.
				// Set y mirrored of that coord.
				if(sm_get(&take_inverse, i, j)){
 8001502:	7afa      	ldrb	r2, [r7, #11]
 8001504:	7b39      	ldrb	r1, [r7, #12]
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f898 	bl	8001640 <sm_get>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <sm_set_shape+0x144>
					sm_set(sm, i, 3-j);
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	f1c3 0303 	rsb	r3, r3, #3
 800151c:	b2da      	uxtb	r2, r3
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f810 	bl	8001548 <sm_set>
			for(uint8_t j = 0; j < 4; ++j){
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	3301      	adds	r3, #1
 800152c:	72fb      	strb	r3, [r7, #11]
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d9e6      	bls.n	8001502 <sm_set_shape+0x11e>
		for(uint8_t i = 0; i < 4; ++i){
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	733b      	strb	r3, [r7, #12]
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d9dd      	bls.n	80014fc <sm_set_shape+0x118>
				}
			}
		}
	}
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <sm_set>:

// 4x4 sm.
void sm_set(union shape_map* sm, uint8_t y, uint8_t x){
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
 8001554:	4613      	mov	r3, r2
 8001556:	70bb      	strb	r3, [r7, #2]
	switch(y){
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d86a      	bhi.n	8001634 <sm_set+0xec>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <sm_set+0x1c>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001575 	.word	0x08001575
 8001568:	080015a5 	.word	0x080015a5
 800156c:	080015d5 	.word	0x080015d5
 8001570:	08001605 	.word	0x08001605
		case 0:
			sm->row1 = sm->row1 ^ (0x1 << (3-x));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800157c:	b2db      	uxtb	r3, r3
 800157e:	b25a      	sxtb	r2, r3
 8001580:	78bb      	ldrb	r3, [r7, #2]
 8001582:	f1c3 0303 	rsb	r3, r3, #3
 8001586:	2101      	movs	r1, #1
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	b25b      	sxtb	r3, r3
 800158e:	4053      	eors	r3, r2
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	b2d9      	uxtb	r1, r3
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	7813      	ldrb	r3, [r2, #0]
 800159c:	f361 0303 	bfi	r3, r1, #0, #4
 80015a0:	7013      	strb	r3, [r2, #0]
			break;
 80015a2:	e047      	b.n	8001634 <sm_set+0xec>
		case 1:
			sm->row2 = sm->row2 ^ (0x1 << (3-x));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	78bb      	ldrb	r3, [r7, #2]
 80015b2:	f1c3 0303 	rsb	r3, r3, #3
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	4053      	eors	r3, r2
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	b2d9      	uxtb	r1, r3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	7813      	ldrb	r3, [r2, #0]
 80015cc:	f361 1307 	bfi	r3, r1, #4, #4
 80015d0:	7013      	strb	r3, [r2, #0]
			break;
 80015d2:	e02f      	b.n	8001634 <sm_set+0xec>
		case 2:
			sm->row3 = sm->row3 ^ (0x1 << (3-x));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	f1c3 0303 	rsb	r3, r3, #3
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4053      	eors	r3, r2
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	b2d9      	uxtb	r1, r3
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	7853      	ldrb	r3, [r2, #1]
 80015fc:	f361 0303 	bfi	r3, r1, #0, #4
 8001600:	7053      	strb	r3, [r2, #1]
			break;
 8001602:	e017      	b.n	8001634 <sm_set+0xec>
		case 3:
			sm->row4 = sm->row4 ^ (0x1 << (3-x));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800160c:	b2db      	uxtb	r3, r3
 800160e:	b25a      	sxtb	r2, r3
 8001610:	78bb      	ldrb	r3, [r7, #2]
 8001612:	f1c3 0303 	rsb	r3, r3, #3
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	b25b      	sxtb	r3, r3
 800161e:	4053      	eors	r3, r2
 8001620:	b25b      	sxtb	r3, r3
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	b2d9      	uxtb	r1, r3
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	7853      	ldrb	r3, [r2, #1]
 800162c:	f361 1307 	bfi	r3, r1, #4, #4
 8001630:	7053      	strb	r3, [r2, #1]
			break;
 8001632:	bf00      	nop
	}
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <sm_get>:

uint8_t sm_get(union shape_map* sm, uint8_t y, uint8_t x){
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	70bb      	strb	r3, [r7, #2]
	uint8_t pixel = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
	switch(y){
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d84a      	bhi.n	80016f0 <sm_get+0xb0>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <sm_get+0x20>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001671 	.word	0x08001671
 8001664:	08001691 	.word	0x08001691
 8001668:	080016b1 	.word	0x080016b1
 800166c:	080016d1 	.word	0x080016d1
		case 0:
			pixel = (sm->row1 >> (3-x)) & 0x1;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	78bb      	ldrb	r3, [r7, #2]
 800167e:	f1c3 0303 	rsb	r3, r3, #3
 8001682:	fa42 f303 	asr.w	r3, r2, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
			break;
 800168e:	e02f      	b.n	80016f0 <sm_get+0xb0>
		case 1:
			pixel = (sm->row2 >> (3-x)) & 0x1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	f1c3 0303 	rsb	r3, r3, #3
 80016a2:	fa42 f303 	asr.w	r3, r2, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
			break;
 80016ae:	e01f      	b.n	80016f0 <sm_get+0xb0>
		case 2:
			pixel = (sm->row3 >> (3-x)) & 0x1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	78bb      	ldrb	r3, [r7, #2]
 80016be:	f1c3 0303 	rsb	r3, r3, #3
 80016c2:	fa42 f303 	asr.w	r3, r2, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
			break;
 80016ce:	e00f      	b.n	80016f0 <sm_get+0xb0>
		case 3:
			pixel = (sm->row4 >> (3-x)) & 0x1;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	f1c3 0303 	rsb	r3, r3, #3
 80016e2:	fa42 f303 	asr.w	r3, r2, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
			break;
 80016ee:	bf00      	nop
	}
	return pixel;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop

08001700 <sm_get_reverse_column>:

static uint8_t sm_get_reverse_column(union shape_map* sm, uint8_t column_index){
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
	uint8_t column = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
	column_index = 3 - column_index;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f1c3 0303 	rsb	r3, r3, #3
 8001716:	70fb      	strb	r3, [r7, #3]

	column = column ^ (((sm->row1 >> column_index) & 0x1) << 0);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	fa42 f303 	asr.w	r3, r2, r3
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b25a      	sxtb	r2, r3
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4053      	eors	r3, r2
 8001738:	b25b      	sxtb	r3, r3
 800173a:	73fb      	strb	r3, [r7, #15]
	column = column ^ (((sm->row2 >> column_index) & 0x1) << 1);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	fa42 f303 	asr.w	r3, r2, r3
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	b25b      	sxtb	r3, r3
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	b25a      	sxtb	r2, r3
 8001758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175c:	4053      	eors	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	73fb      	strb	r3, [r7, #15]
	column = column ^ (((sm->row3 >> column_index) & 0x1) << 2);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	fa42 f303 	asr.w	r3, r2, r3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	b25b      	sxtb	r3, r3
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	b25a      	sxtb	r2, r3
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4053      	eors	r3, r2
 8001784:	b25b      	sxtb	r3, r3
 8001786:	73fb      	strb	r3, [r7, #15]
	column = column ^ (((sm->row4 >> column_index) & 0x1) << 3);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	fa42 f303 	asr.w	r3, r2, r3
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a8:	4053      	eors	r3, r2
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	73fb      	strb	r3, [r7, #15]

	return column;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <sm_rotate>:

// Rotates the sm in the clock wise direction with 90 degrees count%4 times.
void sm_rotate(union shape_map* sm, uint8_t count){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
	uint8_t actual_count = count % 4;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	73bb      	strb	r3, [r7, #14]
	union shape_map to_rotate;
	for(uint8_t i = 0; i < actual_count; ++i){
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e041      	b.n	800185a <sm_rotate+0x9e>
		// 90degrees clock wise rotation.
		to_rotate.val = sm->val;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	81bb      	strh	r3, [r7, #12]
		sm->row1 = sm_get_reverse_column(&to_rotate, 0);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff8c 	bl	8001700 <sm_get_reverse_column>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	b2d9      	uxtb	r1, r3
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	7813      	ldrb	r3, [r2, #0]
 80017f4:	f361 0303 	bfi	r3, r1, #0, #4
 80017f8:	7013      	strb	r3, [r2, #0]
		sm->row2 = sm_get_reverse_column(&to_rotate, 1);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2101      	movs	r1, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff7d 	bl	8001700 <sm_get_reverse_column>
 8001806:	4603      	mov	r3, r0
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	7813      	ldrb	r3, [r2, #0]
 8001812:	f361 1307 	bfi	r3, r1, #4, #4
 8001816:	7013      	strb	r3, [r2, #0]
		sm->row3 = sm_get_reverse_column(&to_rotate, 2);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff6e 	bl	8001700 <sm_get_reverse_column>
 8001824:	4603      	mov	r3, r0
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	b2d9      	uxtb	r1, r3
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	7853      	ldrb	r3, [r2, #1]
 8001830:	f361 0303 	bfi	r3, r1, #0, #4
 8001834:	7053      	strb	r3, [r2, #1]
		sm->row4 = sm_get_reverse_column(&to_rotate, 3);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2103      	movs	r1, #3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <sm_get_reverse_column>
 8001842:	4603      	mov	r3, r0
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	b2d9      	uxtb	r1, r3
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	7853      	ldrb	r3, [r2, #1]
 800184e:	f361 1307 	bfi	r3, r1, #4, #4
 8001852:	7053      	strb	r3, [r2, #1]
	for(uint8_t i = 0; i < actual_count; ++i){
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3301      	adds	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	7bbb      	ldrb	r3, [r7, #14]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3b9      	bcc.n	80017d6 <sm_rotate+0x1a>
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <put_shape_on_map>:

void put_shape_on_map(union shape_map* sm){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	uint8_t map_x = 0, map_y = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	737b      	strb	r3, [r7, #13]
 8001878:	2300      	movs	r3, #0
 800187a:	733b      	strb	r3, [r7, #12]
	for(uint8_t i = 0; i < 4; ++i){
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e026      	b.n	80018d0 <put_shape_on_map+0x64>
		map_y = sm_cur_y + i;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <put_shape_on_map+0x74>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4413      	add	r3, r2
 800188a:	733b      	strb	r3, [r7, #12]
		for(uint8_t j = 0; j < 4; ++j){
 800188c:	2300      	movs	r3, #0
 800188e:	73bb      	strb	r3, [r7, #14]
 8001890:	e018      	b.n	80018c4 <put_shape_on_map+0x58>
			uint8_t bit = sm_get(sm, i, j);
 8001892:	7bba      	ldrb	r2, [r7, #14]
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	4619      	mov	r1, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fed1 	bl	8001640 <sm_get>
 800189e:	4603      	mov	r3, r0
 80018a0:	72fb      	strb	r3, [r7, #11]
			if(bit){
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00a      	beq.n	80018be <put_shape_on_map+0x52>
				map_x = sm_cur_x + j;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <put_shape_on_map+0x78>)
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	4413      	add	r3, r2
 80018b0:	737b      	strb	r3, [r7, #13]
				tetris_set(map_y, map_x);
 80018b2:	7b7a      	ldrb	r2, [r7, #13]
 80018b4:	7b3b      	ldrb	r3, [r7, #12]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fcc9 	bl	8001250 <tetris_set>
		for(uint8_t j = 0; j < 4; ++j){
 80018be:	7bbb      	ldrb	r3, [r7, #14]
 80018c0:	3301      	adds	r3, #1
 80018c2:	73bb      	strb	r3, [r7, #14]
 80018c4:	7bbb      	ldrb	r3, [r7, #14]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d9e3      	bls.n	8001892 <put_shape_on_map+0x26>
	for(uint8_t i = 0; i < 4; ++i){
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3301      	adds	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d9d5      	bls.n	8001882 <put_shape_on_map+0x16>
			}
		}
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000492 	.word	0x20000492
 80018e4:	20000493 	.word	0x20000493

080018e8 <display_shape>:

// Displays a live shape without putting it in the map
static void display_shape(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
	uint16_t scaled_y = 0, scaled_x = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	817b      	strh	r3, [r7, #10]
 80018f2:	2300      	movs	r3, #0
 80018f4:	813b      	strh	r3, [r7, #8]
	uint8_t map_y = 0, map_x = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	2300      	movs	r3, #0
 80018fc:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < 4; ++i){
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	e048      	b.n	8001996 <display_shape+0xae>
		map_y = sm_cur_y + i;
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <display_shape+0xc0>)
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	4413      	add	r3, r2
 800190c:	71fb      	strb	r3, [r7, #7]
		for(uint8_t j = 0; j < 4; ++j){
 800190e:	2300      	movs	r3, #0
 8001910:	73bb      	strb	r3, [r7, #14]
 8001912:	e03a      	b.n	800198a <display_shape+0xa2>
			uint8_t pixel = sm_get(&sm_cur, i, j);
 8001914:	7bba      	ldrb	r2, [r7, #14]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4619      	mov	r1, r3
 800191a:	4824      	ldr	r0, [pc, #144]	; (80019ac <display_shape+0xc4>)
 800191c:	f7ff fe90 	bl	8001640 <sm_get>
 8001920:	4603      	mov	r3, r0
 8001922:	717b      	strb	r3, [r7, #5]
			if(pixel){
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02c      	beq.n	8001984 <display_shape+0x9c>
				map_x = sm_cur_x + j;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <display_shape+0xc8>)
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	4413      	add	r3, r2
 8001932:	71bb      	strb	r3, [r7, #6]
				for(uint8_t si = 0; si < 4; ++si){
 8001934:	2300      	movs	r3, #0
 8001936:	737b      	strb	r3, [r7, #13]
 8001938:	e021      	b.n	800197e <display_shape+0x96>
					scaled_y = map_y*SCALE + si;
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	b29b      	uxth	r3, r3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	b29a      	uxth	r2, r3
 8001942:	7b7b      	ldrb	r3, [r7, #13]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	817b      	strh	r3, [r7, #10]
					for(uint8_t sj = 0; sj < 4; ++sj){
 800194a:	2300      	movs	r3, #0
 800194c:	733b      	strb	r3, [r7, #12]
 800194e:	e010      	b.n	8001972 <display_shape+0x8a>
						scaled_x = map_x*SCALE  + sj;
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	b29b      	uxth	r3, r3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	b29a      	uxth	r2, r3
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	813b      	strh	r3, [r7, #8]
						SSD1306_DrawPixel(scaled_y, scaled_x, 1);
 8001960:	8939      	ldrh	r1, [r7, #8]
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	2201      	movs	r2, #1
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f986 	bl	8000c78 <SSD1306_DrawPixel>
					for(uint8_t sj = 0; sj < 4; ++sj){
 800196c:	7b3b      	ldrb	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	733b      	strb	r3, [r7, #12]
 8001972:	7b3b      	ldrb	r3, [r7, #12]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d9eb      	bls.n	8001950 <display_shape+0x68>
				for(uint8_t si = 0; si < 4; ++si){
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	3301      	adds	r3, #1
 800197c:	737b      	strb	r3, [r7, #13]
 800197e:	7b7b      	ldrb	r3, [r7, #13]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d9da      	bls.n	800193a <display_shape+0x52>
		for(uint8_t j = 0; j < 4; ++j){
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	3301      	adds	r3, #1
 8001988:	73bb      	strb	r3, [r7, #14]
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d9c1      	bls.n	8001914 <display_shape+0x2c>
	for(uint8_t i = 0; i < 4; ++i){
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	3301      	adds	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d9b3      	bls.n	8001904 <display_shape+0x1c>
					}
				}
			}
		}
	}
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000492 	.word	0x20000492
 80019ac:	20000490 	.word	0x20000490
 80019b0:	20000493 	.word	0x20000493

080019b4 <display_map>:

// At the end when putting the actual pixels, shuffle x and y (is that enough?)
// decide the piece color (just white for now) and scale up.
void display_map(void){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
	uint16_t scaled_y = 0, scaled_x = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	817b      	strh	r3, [r7, #10]
 80019be:	2300      	movs	r3, #0
 80019c0:	813b      	strh	r3, [r7, #8]
	for(uint8_t i = 0; i < TETRIS_ROW; ++i){
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e03e      	b.n	8001a46 <display_map+0x92>
		for(uint8_t j = 0; j < TETRIS_COLUMN; ++j){
 80019c8:	2300      	movs	r3, #0
 80019ca:	73bb      	strb	r3, [r7, #14]
 80019cc:	e035      	b.n	8001a3a <display_map+0x86>
			uint8_t bit = tetris_get(i, j);
 80019ce:	7bba      	ldrb	r2, [r7, #14]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fc5d 	bl	8001294 <tetris_get>
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
			if (bit){
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d027      	beq.n	8001a34 <display_map+0x80>
				// Coord conversion according to the scale
				for(uint8_t s_i = 0; s_i < SCALE; ++s_i){
 80019e4:	2300      	movs	r3, #0
 80019e6:	737b      	strb	r3, [r7, #13]
 80019e8:	e021      	b.n	8001a2e <display_map+0x7a>
					scaled_y = i*SCALE + s_i;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	817b      	strh	r3, [r7, #10]
					for(uint8_t s_j = 0; s_j < SCALE; ++s_j){
 80019fa:	2300      	movs	r3, #0
 80019fc:	733b      	strb	r3, [r7, #12]
 80019fe:	e010      	b.n	8001a22 <display_map+0x6e>
						scaled_x = j*SCALE + s_j;
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	7b3b      	ldrb	r3, [r7, #12]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	813b      	strh	r3, [r7, #8]
						// X and Y shifted
						SSD1306_DrawPixel(scaled_y, scaled_x, 1);
 8001a10:	8939      	ldrh	r1, [r7, #8]
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	2201      	movs	r2, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f92e 	bl	8000c78 <SSD1306_DrawPixel>
					for(uint8_t s_j = 0; s_j < SCALE; ++s_j){
 8001a1c:	7b3b      	ldrb	r3, [r7, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	733b      	strb	r3, [r7, #12]
 8001a22:	7b3b      	ldrb	r3, [r7, #12]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d9eb      	bls.n	8001a00 <display_map+0x4c>
				for(uint8_t s_i = 0; s_i < SCALE; ++s_i){
 8001a28:	7b7b      	ldrb	r3, [r7, #13]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	737b      	strb	r3, [r7, #13]
 8001a2e:	7b7b      	ldrb	r3, [r7, #13]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d9da      	bls.n	80019ea <display_map+0x36>
		for(uint8_t j = 0; j < TETRIS_COLUMN; ++j){
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	3301      	adds	r3, #1
 8001a38:	73bb      	strb	r3, [r7, #14]
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d9c6      	bls.n	80019ce <display_map+0x1a>
	for(uint8_t i = 0; i < TETRIS_ROW; ++i){
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b1f      	cmp	r3, #31
 8001a4a:	d9bd      	bls.n	80019c8 <display_map+0x14>
					}
				}
			}
		}
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <right_blocked>:
void sm_set_coord(uint8_t y, uint8_t x){
	sm_cur_y = y;
	sm_cur_x = x;
}

static uint8_t right_blocked(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	uint8_t blocked = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 4; ++i){
 8001a62:	2300      	movs	r3, #0
 8001a64:	71bb      	strb	r3, [r7, #6]
 8001a66:	e039      	b.n	8001adc <right_blocked+0x84>
		for(uint8_t j = 4; j > 0; --j){
 8001a68:	2304      	movs	r3, #4
 8001a6a:	717b      	strb	r3, [r7, #5]
 8001a6c:	e02b      	b.n	8001ac6 <right_blocked+0x6e>
			uint8_t bit = sm_get(&sm_cur, i ,j-1);
 8001a6e:	797b      	ldrb	r3, [r7, #5]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	4619      	mov	r1, r3
 8001a78:	481d      	ldr	r0, [pc, #116]	; (8001af0 <right_blocked+0x98>)
 8001a7a:	f7ff fde1 	bl	8001640 <sm_get>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	713b      	strb	r3, [r7, #4]
			if(bit){
 8001a82:	793b      	ldrb	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01b      	beq.n	8001ac0 <right_blocked+0x68>
				uint8_t pos_x = sm_cur_x + j-1;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <right_blocked+0x9c>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	797b      	ldrb	r3, [r7, #5]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3b01      	subs	r3, #1
 8001a94:	70fb      	strb	r3, [r7, #3]
				if(pos_x == TETRIS_COLUMN-1 || tetris_get(sm_cur_y + i,pos_x+1))
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d00e      	beq.n	8001aba <right_blocked+0x62>
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <right_blocked+0xa0>)
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f7ff fbf0 	bl	8001294 <tetris_get>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <right_blocked+0x76>
					blocked = 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	71fb      	strb	r3, [r7, #7]
				break;
 8001abe:	e006      	b.n	8001ace <right_blocked+0x76>
		for(uint8_t j = 4; j > 0; --j){
 8001ac0:	797b      	ldrb	r3, [r7, #5]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	717b      	strb	r3, [r7, #5]
 8001ac6:	797b      	ldrb	r3, [r7, #5]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1d0      	bne.n	8001a6e <right_blocked+0x16>
 8001acc:	e000      	b.n	8001ad0 <right_blocked+0x78>
				break;
 8001ace:	bf00      	nop
			}
		}
		if(blocked)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <right_blocked+0x8c>
	for(uint8_t i = 0; i < 4; ++i){
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	71bb      	strb	r3, [r7, #6]
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d9c2      	bls.n	8001a68 <right_blocked+0x10>
 8001ae2:	e000      	b.n	8001ae6 <right_blocked+0x8e>
			break;
 8001ae4:	bf00      	nop
	}
	return blocked;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000490 	.word	0x20000490
 8001af4:	20000493 	.word	0x20000493
 8001af8:	20000492 	.word	0x20000492

08001afc <left_blocked>:

static uint8_t left_blocked(void){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	uint8_t blocked = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 4; ++i){
 8001b06:	2300      	movs	r3, #0
 8001b08:	71bb      	strb	r3, [r7, #6]
 8001b0a:	e035      	b.n	8001b78 <left_blocked+0x7c>
		for(uint8_t j = 0; j < 4; ++j){
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	717b      	strb	r3, [r7, #5]
 8001b10:	e027      	b.n	8001b62 <left_blocked+0x66>
			uint8_t bit = sm_get(&sm_cur, i ,j);
 8001b12:	797a      	ldrb	r2, [r7, #5]
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	4619      	mov	r1, r3
 8001b18:	481c      	ldr	r0, [pc, #112]	; (8001b8c <left_blocked+0x90>)
 8001b1a:	f7ff fd91 	bl	8001640 <sm_get>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	713b      	strb	r3, [r7, #4]
			if(bit){
 8001b22:	793b      	ldrb	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d019      	beq.n	8001b5c <left_blocked+0x60>
				uint8_t pos_x = sm_cur_x + j;
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <left_blocked+0x94>)
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	797b      	ldrb	r3, [r7, #5]
 8001b2e:	4413      	add	r3, r2
 8001b30:	70fb      	strb	r3, [r7, #3]
				if(pos_x == 0 || tetris_get(sm_cur_y + i,pos_x-1))
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <left_blocked+0x5a>
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <left_blocked+0x98>)
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f7ff fba2 	bl	8001294 <tetris_get>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <left_blocked+0x6e>
					blocked = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	71fb      	strb	r3, [r7, #7]
				break;
 8001b5a:	e006      	b.n	8001b6a <left_blocked+0x6e>
		for(uint8_t j = 0; j < 4; ++j){
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	717b      	strb	r3, [r7, #5]
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d9d4      	bls.n	8001b12 <left_blocked+0x16>
 8001b68:	e000      	b.n	8001b6c <left_blocked+0x70>
				break;
 8001b6a:	bf00      	nop
			}
		}
		if(blocked)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <left_blocked+0x84>
	for(uint8_t i = 0; i < 4; ++i){
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	3301      	adds	r3, #1
 8001b76:	71bb      	strb	r3, [r7, #6]
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d9c6      	bls.n	8001b0c <left_blocked+0x10>
 8001b7e:	e000      	b.n	8001b82 <left_blocked+0x86>
			break;
 8001b80:	bf00      	nop
	}
	return blocked;
 8001b82:	79fb      	ldrb	r3, [r7, #7]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000490 	.word	0x20000490
 8001b90:	20000493 	.word	0x20000493
 8001b94:	20000492 	.word	0x20000492

08001b98 <sm_update>:

void sm_update(enum SM_MOVE move){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	switch(move){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d841      	bhi.n	8001c2c <sm_update+0x94>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <sm_update+0x18>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001bd9 	.word	0x08001bd9
 8001bb8:	08001bf1 	.word	0x08001bf1
 8001bbc:	08001c19 	.word	0x08001c19
		case LEFT:
			if(!left_blocked())
 8001bc0:	f7ff ff9c 	bl	8001afc <left_blocked>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12b      	bne.n	8001c22 <sm_update+0x8a>
				sm_cur_x -= 1;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <sm_update+0x9c>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <sm_update+0x9c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
			break;
 8001bd6:	e024      	b.n	8001c22 <sm_update+0x8a>
		case RIGHT:
			if(!right_blocked())
 8001bd8:	f7ff ff3e 	bl	8001a58 <right_blocked>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d121      	bne.n	8001c26 <sm_update+0x8e>
				sm_cur_x += 1;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <sm_update+0x9c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <sm_update+0x9c>)
 8001bec:	701a      	strb	r2, [r3, #0]
			break;
 8001bee:	e01a      	b.n	8001c26 <sm_update+0x8e>
		case DOWN:
				if (lock)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <sm_update+0xa0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d118      	bne.n	8001c2a <sm_update+0x92>
					return;
				if(!sm_bottom_hits())
 8001bf8:	f7ff fb68 	bl	80012cc <sm_bottom_hits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <sm_update+0x78>
					++sm_cur_y;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <sm_update+0xa4>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <sm_update+0xa4>)
 8001c0c:	701a      	strb	r2, [r3, #0]
				else
					lock = 1;
			break;
 8001c0e:	e00d      	b.n	8001c2c <sm_update+0x94>
					lock = 1;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <sm_update+0xa0>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
			break;
 8001c16:	e009      	b.n	8001c2c <sm_update+0x94>
		case ROTATE:
			sm_rotate(&sm_cur, 1);
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <sm_update+0xa8>)
 8001c1c:	f7ff fdce 	bl	80017bc <sm_rotate>
			break;
 8001c20:	e004      	b.n	8001c2c <sm_update+0x94>
			break;
 8001c22:	bf00      	nop
 8001c24:	e002      	b.n	8001c2c <sm_update+0x94>
			break;
 8001c26:	bf00      	nop
 8001c28:	e000      	b.n	8001c2c <sm_update+0x94>
					return;
 8001c2a:	bf00      	nop
	}
}
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000493 	.word	0x20000493
 8001c38:	20000494 	.word	0x20000494
 8001c3c:	20000492 	.word	0x20000492
 8001c40:	20000490 	.word	0x20000490

08001c44 <rng_seed>:

void rng_seed(uint32_t seed){
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	rng_state = seed;
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <rng_seed+0x1c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000000c 	.word	0x2000000c

08001c64 <rng>:

static uint32_t rng(void){
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
	rng_state = rng_state * 1664525 + 1620847577;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <rng+0x24>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <rng+0x28>)
 8001c6e:	fb03 f202 	mul.w	r2, r3, r2
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <rng+0x2c>)
 8001c74:	4413      	add	r3, r2
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <rng+0x24>)
 8001c78:	6013      	str	r3, [r2, #0]
	return rng_state;
 8001c7a:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <rng+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	0019660d 	.word	0x0019660d
 8001c90:	609c2bd9 	.word	0x609c2bd9

08001c94 <check_elimination>:

static void check_elimination(void){
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
	uint8_t rows_to_eliminate = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t start_row = 200;
 8001c9e:	23c8      	movs	r3, #200	; 0xc8
 8001ca0:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = TETRIS_ROW; i > 0; --i){
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	717b      	strb	r3, [r7, #5]
 8001ca6:	e014      	b.n	8001cd2 <check_elimination+0x3e>
		if(map[i-1] == 0xffff){
 8001ca8:	797b      	ldrb	r3, [r7, #5]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <check_elimination+0xb4>)
 8001cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d108      	bne.n	8001ccc <check_elimination+0x38>
			++rows_to_eliminate;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	71fb      	strb	r3, [r7, #7]
			if(start_row == 200)
 8001cc0:	79bb      	ldrb	r3, [r7, #6]
 8001cc2:	2bc8      	cmp	r3, #200	; 0xc8
 8001cc4:	d102      	bne.n	8001ccc <check_elimination+0x38>
				start_row = i-1;
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = TETRIS_ROW; i > 0; --i){
 8001ccc:	797b      	ldrb	r3, [r7, #5]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	717b      	strb	r3, [r7, #5]
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e7      	bne.n	8001ca8 <check_elimination+0x14>
		}
	}
	if(rows_to_eliminate){
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d02d      	beq.n	8001d3a <check_elimination+0xa6>
		score += rows_to_eliminate * TETRIS_COLUMN;
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <check_elimination+0xb8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <check_elimination+0xb8>)
 8001cec:	6013      	str	r3, [r2, #0]
		for(uint8_t i = start_row+1; i > rows_to_eliminate; --i){
 8001cee:	79bb      	ldrb	r3, [r7, #6]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	713b      	strb	r3, [r7, #4]
 8001cf4:	e00e      	b.n	8001d14 <check_elimination+0x80>
			map[i-1] = map[i-1 - rows_to_eliminate];
 8001cf6:	793b      	ldrb	r3, [r7, #4]
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	1ad2      	subs	r2, r2, r3
 8001cfe:	793b      	ldrb	r3, [r7, #4]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	4911      	ldr	r1, [pc, #68]	; (8001d48 <check_elimination+0xb4>)
 8001d04:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <check_elimination+0xb4>)
 8001d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = start_row+1; i > rows_to_eliminate; --i){
 8001d0e:	793b      	ldrb	r3, [r7, #4]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	713b      	strb	r3, [r7, #4]
 8001d14:	793a      	ldrb	r2, [r7, #4]
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8ec      	bhi.n	8001cf6 <check_elimination+0x62>
		}
		for(uint8_t i = 0; i < rows_to_eliminate; ++i)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	70fb      	strb	r3, [r7, #3]
 8001d20:	e007      	b.n	8001d32 <check_elimination+0x9e>
			map[i] = 0;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <check_elimination+0xb4>)
 8001d26:	2100      	movs	r1, #0
 8001d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < rows_to_eliminate; ++i)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	70fb      	strb	r3, [r7, #3]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3f3      	bcc.n	8001d22 <check_elimination+0x8e>
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000450 	.word	0x20000450
 8001d4c:	2000049c 	.word	0x2000049c

08001d50 <game_iteration>:

// TODO add color input,
enum GAME_STATE game_iteration(enum SM_MOVE move){
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
	uint8_t go_down = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]

	if(last_time + interval < HAL_GetTick()){
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <game_iteration+0xf0>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <game_iteration+0xf4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	18d4      	adds	r4, r2, r3
 8001d68:	f000 f93e 	bl	8001fe8 <HAL_GetTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	429c      	cmp	r4, r3
 8001d70:	d206      	bcs.n	8001d80 <game_iteration+0x30>
		last_time = HAL_GetTick();
 8001d72:	f000 f939 	bl	8001fe8 <HAL_GetTick>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <game_iteration+0xf0>)
 8001d7a:	6013      	str	r3, [r2, #0]
		go_down = 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
	}

	if(go_down || move != NO_INPUT)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <game_iteration+0x3c>
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d001      	beq.n	8001d90 <game_iteration+0x40>
		SSD1306_Clear();
 8001d8c:	f7ff f88f 	bl	8000eae <SSD1306_Clear>

	if(tetris_get(0, 8))
 8001d90:	2108      	movs	r1, #8
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff fa7e 	bl	8001294 <tetris_get>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <game_iteration+0x52>
		return LOST;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e04a      	b.n	8001e38 <game_iteration+0xe8>

	// New shape, init it.
	if(sm_cur_x == 0 && sm_cur_y == 0){
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <game_iteration+0xf8>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d11a      	bne.n	8001de0 <game_iteration+0x90>
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <game_iteration+0xfc>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d116      	bne.n	8001de0 <game_iteration+0x90>
		sm_cur_x = 8;
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <game_iteration+0xf8>)
 8001db4:	2208      	movs	r2, #8
 8001db6:	701a      	strb	r2, [r3, #0]
		uint32_t shape = rng() % SHAPE_COUNT;
 8001db8:	f7ff ff54 	bl	8001c64 <rng>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <game_iteration+0x100>)
 8001dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc4:	0899      	lsrs	r1, r3, #2
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	60bb      	str	r3, [r7, #8]
		sm_set_shape(&sm_cur, shape, 0);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	481e      	ldr	r0, [pc, #120]	; (8001e54 <game_iteration+0x104>)
 8001dda:	f7ff fb03 	bl	80013e4 <sm_set_shape>
	if(sm_cur_x == 0 && sm_cur_y == 0){
 8001dde:	e003      	b.n	8001de8 <game_iteration+0x98>
	}else{
		sm_update(move);
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fed8 	bl	8001b98 <sm_update>
	}

	//go down one.
	if(go_down)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <game_iteration+0xa4>
		sm_update(DOWN);
 8001dee:	2002      	movs	r0, #2
 8001df0:	f7ff fed2 	bl	8001b98 <sm_update>
	// We've hit the bottom.
	if(lock){
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <game_iteration+0x108>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d010      	beq.n	8001e1e <game_iteration+0xce>
		// Put shape data on the map.
		put_shape_on_map(&sm_cur);
 8001dfc:	4815      	ldr	r0, [pc, #84]	; (8001e54 <game_iteration+0x104>)
 8001dfe:	f7ff fd35 	bl	800186c <put_shape_on_map>
		// Reset the vals.
		sm_cur_x = sm_cur_y = lock = 0;
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <game_iteration+0x108>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <game_iteration+0x108>)
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <game_iteration+0xfc>)
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <game_iteration+0xfc>)
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <game_iteration+0xf8>)
 8001e16:	701a      	strb	r2, [r3, #0]
		// Check elimination
		check_elimination();
 8001e18:	f7ff ff3c 	bl	8001c94 <check_elimination>
 8001e1c:	e001      	b.n	8001e22 <game_iteration+0xd2>
	}else{
		// Shape is not locked, display it separately
		display_shape();
 8001e1e:	f7ff fd63 	bl	80018e8 <display_shape>
	}
	// Display the map
	if(go_down || move != NO_INPUT){
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <game_iteration+0xde>
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d003      	beq.n	8001e36 <game_iteration+0xe6>
		display_map();
 8001e2e:	f7ff fdc1 	bl	80019b4 <display_map>
		SSD1306_UpdateScreen();
 8001e32:	f7fe fed3 	bl	8000bdc <SSD1306_UpdateScreen>
	}
	return RUNNING;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	20000498 	.word	0x20000498
 8001e44:	20000010 	.word	0x20000010
 8001e48:	20000493 	.word	0x20000493
 8001e4c:	20000492 	.word	0x20000492
 8001e50:	cccccccd 	.word	0xcccccccd
 8001e54:	20000490 	.word	0x20000490
 8001e58:	20000494 	.word	0x20000494

08001e5c <get_score>:

uint32_t get_score(void){
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
	return score;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <get_score+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	2000049c 	.word	0x2000049c

08001e74 <init_game>:

void init_game(void){
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
	score = 0;
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <init_game+0x44>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
	sm_cur_y = sm_cur_x = 0;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <init_game+0x48>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <init_game+0x48>)
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <init_game+0x4c>)
 8001e8c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < TETRIS_ROW; ++i)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	e007      	b.n	8001ea4 <init_game+0x30>
		map[i] = 0;
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <init_game+0x50>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2100      	movs	r1, #0
 8001e9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = 0; i < TETRIS_ROW; ++i)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b1f      	cmp	r3, #31
 8001ea8:	d9f4      	bls.n	8001e94 <init_game+0x20>
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	2000049c 	.word	0x2000049c
 8001ebc:	20000493 	.word	0x20000493
 8001ec0:	20000492 	.word	0x20000492
 8001ec4:	20000450 	.word	0x20000450

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff f99b 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f002 fc87 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7fe faef 	bl	80004dc <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001f0c:	0800570c 	.word	0x0800570c
  ldr r2, =_sbss
 8001f10:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001f14:	200005a8 	.word	0x200005a8

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 fd51 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff f850 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fd69 	bl	8002a56 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 fd31 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000018 	.word	0x20000018
 8001fbc:	20000014 	.word	0x20000014

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000018 	.word	0x20000018
 8001fe4:	200005a4 	.word	0x200005a4

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	200005a4 	.word	0x200005a4

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000018 	.word	0x20000018

08002048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e033      	b.n	80020c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe ffec 	bl	8001044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800208e:	f023 0302 	bic.w	r3, r3, #2
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa58 	bl	8002550 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
 80020b6:	e001      	b.n	80020bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_Start_DMA+0x1e>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e0ce      	b.n	800228c <HAL_ADC_Start_DMA+0x1bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d018      	beq.n	8002136 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002114:	4b5f      	ldr	r3, [pc, #380]	; (8002294 <HAL_ADC_Start_DMA+0x1c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5f      	ldr	r2, [pc, #380]	; (8002298 <HAL_ADC_Start_DMA+0x1c8>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9a      	lsrs	r2, r3, #18
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002128:	e002      	b.n	8002130 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	3b01      	subs	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f9      	bne.n	800212a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002144:	d107      	bne.n	8002156 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002154:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	f040 8086 	bne.w	8002272 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002190:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a4:	d106      	bne.n	80021b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f023 0206 	bic.w	r2, r3, #6
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
 80021b2:	e002      	b.n	80021ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_ADC_Start_DMA+0x1cc>)
 80021c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	4a35      	ldr	r2, [pc, #212]	; (80022a0 <HAL_ADC_Start_DMA+0x1d0>)
 80021cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <HAL_ADC_Start_DMA+0x1d4>)
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	4a33      	ldr	r2, [pc, #204]	; (80022a8 <HAL_ADC_Start_DMA+0x1d8>)
 80021dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002206:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	334c      	adds	r3, #76	; 0x4c
 8002212:	4619      	mov	r1, r3
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f000 fcd8 	bl	8002bcc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10f      	bne.n	8002248 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d129      	bne.n	800228a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	e020      	b.n	800228a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_ADC_Start_DMA+0x1dc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d11b      	bne.n	800228a <HAL_ADC_Start_DMA+0x1ba>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d114      	bne.n	800228a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	e00b      	b.n	800228a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0210 	orr.w	r2, r3, #16
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000008 	.word	0x20000008
 8002298:	431bde83 	.word	0x431bde83
 800229c:	40012300 	.word	0x40012300
 80022a0:	08002749 	.word	0x08002749
 80022a4:	08002803 	.word	0x08002803
 80022a8:	0800281f 	.word	0x0800281f
 80022ac:	40012000 	.word	0x40012000

080022b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1c>
 8002304:	2302      	movs	r3, #2
 8002306:	e113      	b.n	8002530 <HAL_ADC_ConfigChannel+0x244>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d925      	bls.n	8002364 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	3b1e      	subs	r3, #30
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43da      	mvns	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	400a      	ands	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68d9      	ldr	r1, [r3, #12]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	4618      	mov	r0, r3
 8002350:	4603      	mov	r3, r0
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4403      	add	r3, r0
 8002356:	3b1e      	subs	r3, #30
 8002358:	409a      	lsls	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	e022      	b.n	80023aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6919      	ldr	r1, [r3, #16]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	2207      	movs	r2, #7
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	400a      	ands	r2, r1
 8002386:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	4603      	mov	r3, r0
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4403      	add	r3, r0
 80023a0:	409a      	lsls	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d824      	bhi.n	80023fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b05      	subs	r3, #5
 80023c4:	221f      	movs	r2, #31
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	3b05      	subs	r3, #5
 80023ee:	fa00 f203 	lsl.w	r2, r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
 80023fa:	e04c      	b.n	8002496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b0c      	cmp	r3, #12
 8002402:	d824      	bhi.n	800244e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b23      	subs	r3, #35	; 0x23
 8002416:	221f      	movs	r2, #31
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43da      	mvns	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	400a      	ands	r2, r1
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b23      	subs	r3, #35	; 0x23
 8002440:	fa00 f203 	lsl.w	r2, r0, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
 800244c:	e023      	b.n	8002496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b41      	subs	r3, #65	; 0x41
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b41      	subs	r3, #65	; 0x41
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_ADC_ConfigChannel+0x250>)
 8002498:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_ADC_ConfigChannel+0x254>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10f      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1d8>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b12      	cmp	r3, #18
 80024aa:	d10b      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_ADC_ConfigChannel+0x254>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d12b      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x23a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_ADC_ConfigChannel+0x258>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x1f4>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b11      	cmp	r3, #17
 80024de:	d122      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_ADC_ConfigChannel+0x258>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d111      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_ADC_ConfigChannel+0x25c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_ADC_ConfigChannel+0x260>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	0c9a      	lsrs	r2, r3, #18
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40012300 	.word	0x40012300
 8002540:	40012000 	.word	0x40012000
 8002544:	10000012 	.word	0x10000012
 8002548:	20000008 	.word	0x20000008
 800254c:	431bde83 	.word	0x431bde83

08002550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002558:	4b79      	ldr	r3, [pc, #484]	; (8002740 <ADC_Init+0x1f0>)
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	021a      	lsls	r2, r3, #8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	4a58      	ldr	r2, [pc, #352]	; (8002744 <ADC_Init+0x1f4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	e00f      	b.n	800264e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800263c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800264c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0202 	bic.w	r2, r2, #2
 800265c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7e1b      	ldrb	r3, [r3, #24]
 8002668:	005a      	lsls	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800269a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	3b01      	subs	r3, #1
 80026a8:	035a      	lsls	r2, r3, #13
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	e007      	b.n	80026c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	3b01      	subs	r3, #1
 80026e0:	051a      	lsls	r2, r3, #20
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002706:	025a      	lsls	r2, r3, #9
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	029a      	lsls	r2, r3, #10
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40012300 	.word	0x40012300
 8002744:	0f000001 	.word	0x0f000001

08002748 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d13c      	bne.n	80027dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d12b      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d127      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800279c:	2b00      	cmp	r3, #0
 800279e:	d119      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0220 	bic.w	r2, r2, #32
 80027ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fd6b 	bl	80022b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027da:	e00e      	b.n	80027fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff fd75 	bl	80022d8 <HAL_ADC_ErrorCallback>
}
 80027ee:	e004      	b.n	80027fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fd57 	bl	80022c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f043 0204 	orr.w	r2, r3, #4
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fd4a 	bl	80022d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff fab4 	bl	8001fe8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e099      	b.n	8002bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aac:	e00f      	b.n	8002ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aae:	f7ff fa9b 	bl	8001fe8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d908      	bls.n	8002ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e078      	b.n	8002bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e8      	bne.n	8002aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_DMA_Init+0x158>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0307 	bic.w	r3, r3, #7
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d117      	bne.n	8002b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa6f 	bl	8003058 <DMA_CheckFifoParam>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e016      	b.n	8002bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa26 	bl	8002fec <DMA_CalcBaseAndBitshift>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	223f      	movs	r2, #63	; 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	f010803f 	.word	0xf010803f

08002bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_DMA_Start_IT+0x26>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e040      	b.n	8002c74 <HAL_DMA_Start_IT+0xa8>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d12f      	bne.n	8002c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f9b8 	bl	8002f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	223f      	movs	r2, #63	; 0x3f
 8002c26:	409a      	lsls	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0216 	orr.w	r2, r2, #22
 8002c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0208 	orr.w	r2, r2, #8
 8002c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e005      	b.n	8002c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c88:	4b8e      	ldr	r3, [pc, #568]	; (8002ec4 <HAL_DMA_IRQHandler+0x248>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a8e      	ldr	r2, [pc, #568]	; (8002ec8 <HAL_DMA_IRQHandler+0x24c>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01a      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2201      	movs	r2, #1
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f043 0202 	orr.w	r2, r3, #2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	2204      	movs	r2, #4
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d012      	beq.n	8002d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2204      	movs	r2, #4
 8002d42:	409a      	lsls	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2210      	movs	r2, #16
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d043      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03c      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2210      	movs	r2, #16
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d108      	bne.n	8002dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d024      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
 8002daa:	e01f      	b.n	8002dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e016      	b.n	8002dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0208 	bic.w	r2, r2, #8
 8002dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2220      	movs	r2, #32
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 808f 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8087 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	2220      	movs	r2, #32
 8002e14:	409a      	lsls	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d136      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0216 	bic.w	r2, r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_DMA_IRQHandler+0x1da>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0208 	bic.w	r2, r2, #8
 8002e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	223f      	movs	r2, #63	; 0x3f
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d07e      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
        }
        return;
 8002e92:	e079      	b.n	8002f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01d      	beq.n	8002ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d031      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e02c      	b.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
 8002edc:	e01e      	b.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10f      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0210 	bic.w	r2, r2, #16
 8002efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d032      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2205      	movs	r2, #5
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d307      	bcc.n	8002f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f2      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x2cc>
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f88:	bf00      	nop
    }
  }
}
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d108      	bne.n	8002fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fce:	e007      	b.n	8002fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3b10      	subs	r3, #16
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <DMA_CalcBaseAndBitshift+0x64>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <DMA_CalcBaseAndBitshift+0x68>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d909      	bls.n	800302e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	1d1a      	adds	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	; 0x58
 800302c:	e007      	b.n	800303e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	aaaaaaab 	.word	0xaaaaaaab
 8003054:	080056cc 	.word	0x080056cc

08003058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11f      	bne.n	80030b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d856      	bhi.n	8003126 <DMA_CheckFifoParam+0xce>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <DMA_CheckFifoParam+0x28>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003091 	.word	0x08003091
 8003084:	080030a3 	.word	0x080030a3
 8003088:	08003091 	.word	0x08003091
 800308c:	08003127 	.word	0x08003127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d046      	beq.n	800312a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e043      	b.n	800312a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030aa:	d140      	bne.n	800312e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e03d      	b.n	800312e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	d121      	bne.n	8003100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d837      	bhi.n	8003132 <DMA_CheckFifoParam+0xda>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <DMA_CheckFifoParam+0x70>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030df 	.word	0x080030df
 80030d0:	080030d9 	.word	0x080030d9
 80030d4:	080030f1 	.word	0x080030f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e030      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d025      	beq.n	8003136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e022      	b.n	8003136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f8:	d11f      	bne.n	800313a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030fe:	e01c      	b.n	800313a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d903      	bls.n	800310e <DMA_CheckFifoParam+0xb6>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d003      	beq.n	8003114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800310c:	e018      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      break;
 8003112:	e015      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00e      	beq.n	800313e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e00b      	b.n	800313e <DMA_CheckFifoParam+0xe6>
      break;
 8003126:	bf00      	nop
 8003128:	e00a      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e008      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e006      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e004      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e002      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;   
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
    }
  } 
  
  return status; 
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	e159      	b.n	8003420 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	429a      	cmp	r2, r3
 8003186:	f040 8148 	bne.w	800341a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d005      	beq.n	80031a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d130      	bne.n	8003204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 0201 	and.w	r2, r3, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b03      	cmp	r3, #3
 800320e:	d017      	beq.n	8003240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d123      	bne.n	8003294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	08da      	lsrs	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3208      	adds	r2, #8
 8003254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	220f      	movs	r2, #15
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	08da      	lsrs	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3208      	adds	r2, #8
 800328e:	69b9      	ldr	r1, [r7, #24]
 8003290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0203 	and.w	r2, r3, #3
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a2 	beq.w	800341a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_GPIO_Init+0x2e8>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a56      	ldr	r2, [pc, #344]	; (8003438 <HAL_GPIO_Init+0x2e8>)
 80032e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b54      	ldr	r3, [pc, #336]	; (8003438 <HAL_GPIO_Init+0x2e8>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f2:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_GPIO_Init+0x2ec>)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	220f      	movs	r2, #15
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a49      	ldr	r2, [pc, #292]	; (8003440 <HAL_GPIO_Init+0x2f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d019      	beq.n	8003352 <HAL_GPIO_Init+0x202>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a48      	ldr	r2, [pc, #288]	; (8003444 <HAL_GPIO_Init+0x2f4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x1fe>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a47      	ldr	r2, [pc, #284]	; (8003448 <HAL_GPIO_Init+0x2f8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x1fa>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a46      	ldr	r2, [pc, #280]	; (800344c <HAL_GPIO_Init+0x2fc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x1f6>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a45      	ldr	r2, [pc, #276]	; (8003450 <HAL_GPIO_Init+0x300>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x1f2>
 800333e:	2304      	movs	r3, #4
 8003340:	e008      	b.n	8003354 <HAL_GPIO_Init+0x204>
 8003342:	2307      	movs	r3, #7
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x204>
 8003346:	2303      	movs	r3, #3
 8003348:	e004      	b.n	8003354 <HAL_GPIO_Init+0x204>
 800334a:	2302      	movs	r3, #2
 800334c:	e002      	b.n	8003354 <HAL_GPIO_Init+0x204>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_GPIO_Init+0x204>
 8003352:	2300      	movs	r3, #0
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	f002 0203 	and.w	r2, r2, #3
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	4093      	lsls	r3, r2
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003364:	4935      	ldr	r1, [pc, #212]	; (800343c <HAL_GPIO_Init+0x2ec>)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	3302      	adds	r3, #2
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003372:	4b38      	ldr	r3, [pc, #224]	; (8003454 <HAL_GPIO_Init+0x304>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003396:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <HAL_GPIO_Init+0x304>)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800339c:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_GPIO_Init+0x304>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_GPIO_Init+0x304>)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <HAL_GPIO_Init+0x304>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ea:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_GPIO_Init+0x304>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_GPIO_Init+0x304>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003414:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <HAL_GPIO_Init+0x304>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3301      	adds	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b0f      	cmp	r3, #15
 8003424:	f67f aea2 	bls.w	800316c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	40013800 	.word	0x40013800
 8003440:	40020000 	.word	0x40020000
 8003444:	40020400 	.word	0x40020400
 8003448:	40020800 	.word	0x40020800
 800344c:	40020c00 	.word	0x40020c00
 8003450:	40021000 	.word	0x40021000
 8003454:	40013c00 	.word	0x40013c00

08003458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	807b      	strh	r3, [r7, #2]
 8003464:	4613      	mov	r3, r2
 8003466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003468:	787b      	ldrb	r3, [r7, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003474:	e003      	b.n	800347e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	041a      	lsls	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	619a      	str	r2, [r3, #24]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e12b      	b.n	80036f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fe3e 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034f0:	f001 f976 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 80034f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4a81      	ldr	r2, [pc, #516]	; (8003700 <HAL_I2C_Init+0x274>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d807      	bhi.n	8003510 <HAL_I2C_Init+0x84>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a80      	ldr	r2, [pc, #512]	; (8003704 <HAL_I2C_Init+0x278>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e006      	b.n	800351e <HAL_I2C_Init+0x92>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a7d      	ldr	r2, [pc, #500]	; (8003708 <HAL_I2C_Init+0x27c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	bf94      	ite	ls
 8003518:	2301      	movls	r3, #1
 800351a:	2300      	movhi	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0e7      	b.n	80036f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4a78      	ldr	r2, [pc, #480]	; (800370c <HAL_I2C_Init+0x280>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <HAL_I2C_Init+0x274>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d802      	bhi.n	8003560 <HAL_I2C_Init+0xd4>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3301      	adds	r3, #1
 800355e:	e009      	b.n	8003574 <HAL_I2C_Init+0xe8>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	4a69      	ldr	r2, [pc, #420]	; (8003710 <HAL_I2C_Init+0x284>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	3301      	adds	r3, #1
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	430b      	orrs	r3, r1
 800357a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003586:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	495c      	ldr	r1, [pc, #368]	; (8003700 <HAL_I2C_Init+0x274>)
 8003590:	428b      	cmp	r3, r1
 8003592:	d819      	bhi.n	80035c8 <HAL_I2C_Init+0x13c>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1e59      	subs	r1, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035a8:	400b      	ands	r3, r1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_I2C_Init+0x138>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1e59      	subs	r1, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c2:	e051      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 80035c4:	2304      	movs	r3, #4
 80035c6:	e04f      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d111      	bne.n	80035f4 <HAL_I2C_Init+0x168>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e012      	b.n	800361a <HAL_I2C_Init+0x18e>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	0099      	lsls	r1, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Init+0x196>
 800361e:	2301      	movs	r3, #1
 8003620:	e022      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10e      	bne.n	8003648 <HAL_I2C_Init+0x1bc>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1e58      	subs	r0, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	440b      	add	r3, r1
 8003638:	fbb0 f3f3 	udiv	r3, r0, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003646:	e00f      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e58      	subs	r0, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	0099      	lsls	r1, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	fbb0 f3f3 	udiv	r3, r0, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	6809      	ldr	r1, [r1, #0]
 800366c:	4313      	orrs	r3, r2
 800366e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6911      	ldr	r1, [r2, #16]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68d2      	ldr	r2, [r2, #12]
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	000186a0 	.word	0x000186a0
 8003704:	001e847f 	.word	0x001e847f
 8003708:	003d08ff 	.word	0x003d08ff
 800370c:	431bde83 	.word	0x431bde83
 8003710:	10624dd3 	.word	0x10624dd3

08003714 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	461a      	mov	r2, r3
 8003720:	460b      	mov	r3, r1
 8003722:	817b      	strh	r3, [r7, #10]
 8003724:	4613      	mov	r3, r2
 8003726:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7fe fc5e 	bl	8001fe8 <HAL_GetTick>
 800372c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b20      	cmp	r3, #32
 8003738:	f040 80e0 	bne.w	80038fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2319      	movs	r3, #25
 8003742:	2201      	movs	r2, #1
 8003744:	4970      	ldr	r1, [pc, #448]	; (8003908 <HAL_I2C_Master_Transmit+0x1f4>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fa92 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003752:	2302      	movs	r3, #2
 8003754:	e0d3      	b.n	80038fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2C_Master_Transmit+0x50>
 8003760:	2302      	movs	r3, #2
 8003762:	e0cc      	b.n	80038fe <HAL_I2C_Master_Transmit+0x1ea>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d007      	beq.n	800378a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003798:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2221      	movs	r2, #33	; 0x21
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2210      	movs	r2, #16
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	893a      	ldrh	r2, [r7, #8]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a50      	ldr	r2, [pc, #320]	; (800390c <HAL_I2C_Master_Transmit+0x1f8>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037cc:	8979      	ldrh	r1, [r7, #10]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f9ca 	bl	8003b6c <I2C_MasterRequestWrite>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e08d      	b.n	80038fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037f8:	e066      	b.n	80038c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	6a39      	ldr	r1, [r7, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fb0c 	bl	8003e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b04      	cmp	r3, #4
 8003810:	d107      	bne.n	8003822 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e06b      	b.n	80038fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11b      	bne.n	800389c <HAL_I2C_Master_Transmit+0x188>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d017      	beq.n	800389c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	6a39      	ldr	r1, [r7, #32]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fafc 	bl	8003e9e <I2C_WaitOnBTFFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d107      	bne.n	80038c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e01a      	b.n	80038fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d194      	bne.n	80037fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	00100002 	.word	0x00100002
 800390c:	ffff0000 	.word	0xffff0000

08003910 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	460b      	mov	r3, r1
 800391e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003920:	f7fe fb62 	bl	8001fe8 <HAL_GetTick>
 8003924:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b20      	cmp	r3, #32
 8003934:	f040 8111 	bne.w	8003b5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2319      	movs	r3, #25
 800393e:	2201      	movs	r2, #1
 8003940:	4988      	ldr	r1, [pc, #544]	; (8003b64 <HAL_I2C_IsDeviceReady+0x254>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f994 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
 8003950:	e104      	b.n	8003b5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_I2C_IsDeviceReady+0x50>
 800395c:	2302      	movs	r3, #2
 800395e:	e0fd      	b.n	8003b5c <HAL_I2C_IsDeviceReady+0x24c>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d007      	beq.n	8003986 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2224      	movs	r2, #36	; 0x24
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a70      	ldr	r2, [pc, #448]	; (8003b68 <HAL_I2C_IsDeviceReady+0x258>)
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f952 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e0:	d103      	bne.n	80039ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0b6      	b.n	8003b5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039fe:	f7fe faf3 	bl	8001fe8 <HAL_GetTick>
 8003a02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a32:	e025      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a34:	f7fe fad8 	bl	8001fe8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <HAL_I2C_IsDeviceReady+0x13a>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	22a0      	movs	r2, #160	; 0xa0
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2ba0      	cmp	r3, #160	; 0xa0
 8003a8a:	d005      	beq.n	8003a98 <HAL_I2C_IsDeviceReady+0x188>
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_I2C_IsDeviceReady+0x188>
 8003a92:	7dbb      	ldrb	r3, [r7, #22]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0cd      	beq.n	8003a34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d129      	bne.n	8003b02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2319      	movs	r3, #25
 8003ada:	2201      	movs	r2, #1
 8003adc:	4921      	ldr	r1, [pc, #132]	; (8003b64 <HAL_I2C_IsDeviceReady+0x254>)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f8c6 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e036      	b.n	8003b5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e02c      	b.n	8003b5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2319      	movs	r3, #25
 8003b22:	2201      	movs	r2, #1
 8003b24:	490f      	ldr	r1, [pc, #60]	; (8003b64 <HAL_I2C_IsDeviceReady+0x254>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f8a2 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e012      	b.n	8003b5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	f4ff af32 	bcc.w	80039aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	00100002 	.word	0x00100002
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d006      	beq.n	8003b96 <I2C_MasterRequestWrite+0x2a>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d003      	beq.n	8003b96 <I2C_MasterRequestWrite+0x2a>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b94:	d108      	bne.n	8003ba8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e00b      	b.n	8003bc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	2b12      	cmp	r3, #18
 8003bae:	d107      	bne.n	8003bc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f84f 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be6:	d103      	bne.n	8003bf0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e035      	b.n	8003c60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bfc:	d108      	bne.n	8003c10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	e01b      	b.n	8003c48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	11db      	asrs	r3, r3, #7
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0306 	and.w	r3, r3, #6
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f063 030f 	orn	r3, r3, #15
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	490e      	ldr	r1, [pc, #56]	; (8003c68 <I2C_MasterRequestWrite+0xfc>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f875 	bl	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e010      	b.n	8003c60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c3e:	897b      	ldrh	r3, [r7, #10]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4907      	ldr	r1, [pc, #28]	; (8003c6c <I2C_MasterRequestWrite+0x100>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f865 	bl	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	00010008 	.word	0x00010008
 8003c6c:	00010002 	.word	0x00010002

08003c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c80:	e025      	b.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d021      	beq.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fe f9ad 	bl	8001fe8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d116      	bne.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e023      	b.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10d      	bne.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	e00c      	b.n	8003d0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d0b6      	beq.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d2c:	e051      	b.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d123      	bne.n	8003d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f043 0204 	orr.w	r2, r3, #4
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e046      	b.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d021      	beq.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8e:	f7fe f92b 	bl	8001fe8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d116      	bne.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f043 0220 	orr.w	r2, r3, #32
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e020      	b.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10c      	bne.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e00b      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d18d      	bne.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e28:	e02d      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f878 	bl	8003f20 <I2C_IsAcknowledgeFailed>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e02d      	b.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d021      	beq.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe f8d1 	bl	8001fe8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d116      	bne.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f043 0220 	orr.w	r2, r3, #32
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e007      	b.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d1ca      	bne.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eaa:	e02d      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f837 	bl	8003f20 <I2C_IsAcknowledgeFailed>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e02d      	b.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d021      	beq.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec4:	f7fe f890 	bl	8001fe8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d116      	bne.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e007      	b.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d1ca      	bne.n	8003eac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d11b      	bne.n	8003f70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e267      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d075      	beq.n	800408a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d112      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb6:	4b82      	ldr	r3, [pc, #520]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b7e      	ldr	r3, [pc, #504]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0x108>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d157      	bne.n	8004088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e242      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x74>
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a75      	ldr	r2, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b70      	ldr	r3, [pc, #448]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6f      	ldr	r2, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6c      	ldr	r2, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8004018:	4b69      	ldr	r3, [pc, #420]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a65      	ldr	r2, [pc, #404]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fd ffd6 	bl	8001fe8 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd ffd2 	bl	8001fe8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e207      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b5b      	ldr	r3, [pc, #364]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xc0>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fd ffc2 	bl	8001fe8 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd ffbe 	bl	8001fe8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1f3      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0xe8>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d063      	beq.n	800415e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1c7      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4937      	ldr	r1, [pc, #220]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e03a      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCC_OscConfig+0x244>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fd ff77 	bl	8001fe8 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fd ff73 	bl	8001fe8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1a8      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4925      	ldr	r1, [pc, #148]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x244>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd ff56 	bl	8001fe8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004140:	f7fd ff52 	bl	8001fe8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e187      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d036      	beq.n	80041d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x248>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd ff36 	bl	8001fe8 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fd ff32 	bl	8001fe8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e167      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x200>
 800419e:	e01b      	b.n	80041d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_OscConfig+0x248>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a6:	f7fd ff1f 	bl	8001fe8 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	e00e      	b.n	80041cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fd ff1b 	bl	8001fe8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d907      	bls.n	80041cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e150      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470000 	.word	0x42470000
 80041c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ea      	bne.n	80041ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8097 	beq.w	8004314 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a7c      	ldr	r2, [pc, #496]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b7a      	ldr	r3, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	4b77      	ldr	r3, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d118      	bne.n	8004254 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004222:	4b74      	ldr	r3, [pc, #464]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a73      	ldr	r2, [pc, #460]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422e:	f7fd fedb 	bl	8001fe8 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fd fed7 	bl	8001fe8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e10c      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x2ea>
 800425c:	4b64      	ldr	r3, [pc, #400]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a63      	ldr	r2, [pc, #396]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	e01c      	b.n	80042a4 <HAL_RCC_OscConfig+0x324>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x30c>
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a5e      	ldr	r2, [pc, #376]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a5b      	ldr	r2, [pc, #364]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0x324>
 800428c:	4b58      	ldr	r3, [pc, #352]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b55      	ldr	r3, [pc, #340]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a54      	ldr	r2, [pc, #336]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800429e:	f023 0304 	bic.w	r3, r3, #4
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fd fe9c 	bl	8001fe8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fd fe98 	bl	8001fe8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0cb      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ee      	beq.n	80042b4 <HAL_RCC_OscConfig+0x334>
 80042d6:	e014      	b.n	8004302 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d8:	f7fd fe86 	bl	8001fe8 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fd fe82 	bl	8001fe8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0b5      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1ee      	bne.n	80042e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a1 	beq.w	8004460 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431e:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d05c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d141      	bne.n	80043b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fd fe56 	bl	8001fe8 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fd fe52 	bl	8001fe8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e087      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	491b      	ldr	r1, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fd fe2b 	bl	8001fe8 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004396:	f7fd fe27 	bl	8001fe8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e05c      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x416>
 80043b4:	e054      	b.n	8004460 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fd fe14 	bl	8001fe8 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd fe10 	bl	8001fe8 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e045      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x444>
 80043e2:	e03d      	b.n	8004460 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e038      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40007000 	.word	0x40007000
 80043f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCC_OscConfig+0x4ec>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d028      	beq.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d121      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d11a      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004434:	4293      	cmp	r3, r2
 8004436:	d111      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800

08004470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0cc      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004484:	4b68      	ldr	r3, [pc, #416]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d90c      	bls.n	80044ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b63      	ldr	r3, [pc, #396]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0b8      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c4:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a58      	ldr	r2, [pc, #352]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a52      	ldr	r2, [pc, #328]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e8:	4b50      	ldr	r3, [pc, #320]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	494d      	ldr	r1, [pc, #308]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d044      	beq.n	8004590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d119      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e07f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d003      	beq.n	800452e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452a:	2b03      	cmp	r3, #3
 800452c:	d107      	bne.n	800453e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	4b3f      	ldr	r3, [pc, #252]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e06f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453e:	4b3b      	ldr	r3, [pc, #236]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e067      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f023 0203 	bic.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4934      	ldr	r1, [pc, #208]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	4313      	orrs	r3, r2
 800455e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004560:	f7fd fd42 	bl	8001fe8 <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	e00a      	b.n	800457e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004568:	f7fd fd3e 	bl	8001fe8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e04f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 020c 	and.w	r2, r3, #12
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	429a      	cmp	r2, r3
 800458e:	d1eb      	bne.n	8004568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d20c      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b22      	ldr	r3, [pc, #136]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e032      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4916      	ldr	r1, [pc, #88]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	490e      	ldr	r1, [pc, #56]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045f6:	f000 f821 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	490a      	ldr	r1, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	5ccb      	ldrb	r3, [r1, r3]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fd fca2 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023c00 	.word	0x40023c00
 800462c:	40023800 	.word	0x40023800
 8004630:	080056b4 	.word	0x080056b4
 8004634:	20000008 	.word	0x20000008
 8004638:	20000014 	.word	0x20000014

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004640:	b090      	sub	sp, #64	; 0x40
 8004642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
 8004648:	2300      	movs	r3, #0
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800464c:	2300      	movs	r3, #0
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d00d      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x40>
 8004660:	2b08      	cmp	r3, #8
 8004662:	f200 80a1 	bhi.w	80047a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x34>
 800466a:	2b04      	cmp	r3, #4
 800466c:	d003      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0x3a>
 800466e:	e09b      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004674:	e09b      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004676:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800467a:	e098      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800467c:	4b4f      	ldr	r3, [pc, #316]	; (80047bc <HAL_RCC_GetSysClockFreq+0x180>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004686:	4b4d      	ldr	r3, [pc, #308]	; (80047bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d028      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004692:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	2200      	movs	r2, #0
 800469a:	623b      	str	r3, [r7, #32]
 800469c:	627a      	str	r2, [r7, #36]	; 0x24
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046a4:	2100      	movs	r1, #0
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046a8:	fb03 f201 	mul.w	r2, r3, r1
 80046ac:	2300      	movs	r3, #0
 80046ae:	fb00 f303 	mul.w	r3, r0, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	4a43      	ldr	r2, [pc, #268]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b6:	fba0 1202 	umull	r1, r2, r0, r2
 80046ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046bc:	460a      	mov	r2, r1
 80046be:	62ba      	str	r2, [r7, #40]	; 0x28
 80046c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c2:	4413      	add	r3, r2
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c8:	2200      	movs	r2, #0
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046d6:	f7fb fd7f 	bl	80001d8 <__aeabi_uldivmod>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4613      	mov	r3, r2
 80046e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e2:	e053      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <HAL_RCC_GetSysClockFreq+0x180>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	2200      	movs	r2, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	617a      	str	r2, [r7, #20]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046f6:	f04f 0b00 	mov.w	fp, #0
 80046fa:	4652      	mov	r2, sl
 80046fc:	465b      	mov	r3, fp
 80046fe:	f04f 0000 	mov.w	r0, #0
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	0159      	lsls	r1, r3, #5
 8004708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800470c:	0150      	lsls	r0, r2, #5
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	ebb2 080a 	subs.w	r8, r2, sl
 8004716:	eb63 090b 	sbc.w	r9, r3, fp
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004726:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800472a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800472e:	ebb2 0408 	subs.w	r4, r2, r8
 8004732:	eb63 0509 	sbc.w	r5, r3, r9
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	00eb      	lsls	r3, r5, #3
 8004740:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004744:	00e2      	lsls	r2, r4, #3
 8004746:	4614      	mov	r4, r2
 8004748:	461d      	mov	r5, r3
 800474a:	eb14 030a 	adds.w	r3, r4, sl
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	eb45 030b 	adc.w	r3, r5, fp
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004762:	4629      	mov	r1, r5
 8004764:	028b      	lsls	r3, r1, #10
 8004766:	4621      	mov	r1, r4
 8004768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800476c:	4621      	mov	r1, r4
 800476e:	028a      	lsls	r2, r1, #10
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	2200      	movs	r2, #0
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	60fa      	str	r2, [r7, #12]
 800477c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004780:	f7fb fd2a 	bl	80001d8 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4613      	mov	r3, r2
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_GetSysClockFreq+0x180>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	3301      	adds	r3, #1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800479c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047a6:	e002      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80047aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3740      	adds	r7, #64	; 0x40
 80047b4:	46bd      	mov	sp, r7
 80047b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ba:	bf00      	nop
 80047bc:	40023800 	.word	0x40023800
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	017d7840 	.word	0x017d7840

080047c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000008 	.word	0x20000008

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047e4:	f7ff fff0 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0a9b      	lsrs	r3, r3, #10
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4903      	ldr	r1, [pc, #12]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	080056c4 	.word	0x080056c4

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4d0d      	ldr	r5, [pc, #52]	; (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <__libc_init_array+0x3c>)
 800480e:	1b64      	subs	r4, r4, r5
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2600      	movs	r6, #0
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4d0b      	ldr	r5, [pc, #44]	; (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	; (800484c <__libc_init_array+0x44>)
 800481c:	f000 f87c 	bl	8004918 <_init>
 8004820:	1b64      	subs	r4, r4, r5
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2600      	movs	r6, #0
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f855 3b04 	ldr.w	r3, [r5], #4
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	08005704 	.word	0x08005704
 8004844:	08005704 	.word	0x08005704
 8004848:	08005704 	.word	0x08005704
 800484c:	08005708 	.word	0x08005708

08004850 <__itoa>:
 8004850:	1e93      	subs	r3, r2, #2
 8004852:	2b22      	cmp	r3, #34	; 0x22
 8004854:	b510      	push	{r4, lr}
 8004856:	460c      	mov	r4, r1
 8004858:	d904      	bls.n	8004864 <__itoa+0x14>
 800485a:	2300      	movs	r3, #0
 800485c:	700b      	strb	r3, [r1, #0]
 800485e:	461c      	mov	r4, r3
 8004860:	4620      	mov	r0, r4
 8004862:	bd10      	pop	{r4, pc}
 8004864:	2a0a      	cmp	r2, #10
 8004866:	d109      	bne.n	800487c <__itoa+0x2c>
 8004868:	2800      	cmp	r0, #0
 800486a:	da07      	bge.n	800487c <__itoa+0x2c>
 800486c:	232d      	movs	r3, #45	; 0x2d
 800486e:	700b      	strb	r3, [r1, #0]
 8004870:	4240      	negs	r0, r0
 8004872:	2101      	movs	r1, #1
 8004874:	4421      	add	r1, r4
 8004876:	f000 f80d 	bl	8004894 <__utoa>
 800487a:	e7f1      	b.n	8004860 <__itoa+0x10>
 800487c:	2100      	movs	r1, #0
 800487e:	e7f9      	b.n	8004874 <__itoa+0x24>

08004880 <itoa>:
 8004880:	f7ff bfe6 	b.w	8004850 <__itoa>

08004884 <memset>:
 8004884:	4402      	add	r2, r0
 8004886:	4603      	mov	r3, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	f803 1b01 	strb.w	r1, [r3], #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <__utoa>:
 8004894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004896:	4c1f      	ldr	r4, [pc, #124]	; (8004914 <__utoa+0x80>)
 8004898:	b08b      	sub	sp, #44	; 0x2c
 800489a:	4605      	mov	r5, r0
 800489c:	460b      	mov	r3, r1
 800489e:	466e      	mov	r6, sp
 80048a0:	f104 0c20 	add.w	ip, r4, #32
 80048a4:	6820      	ldr	r0, [r4, #0]
 80048a6:	6861      	ldr	r1, [r4, #4]
 80048a8:	4637      	mov	r7, r6
 80048aa:	c703      	stmia	r7!, {r0, r1}
 80048ac:	3408      	adds	r4, #8
 80048ae:	4564      	cmp	r4, ip
 80048b0:	463e      	mov	r6, r7
 80048b2:	d1f7      	bne.n	80048a4 <__utoa+0x10>
 80048b4:	7921      	ldrb	r1, [r4, #4]
 80048b6:	7139      	strb	r1, [r7, #4]
 80048b8:	1e91      	subs	r1, r2, #2
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	6038      	str	r0, [r7, #0]
 80048be:	2922      	cmp	r1, #34	; 0x22
 80048c0:	f04f 0100 	mov.w	r1, #0
 80048c4:	d904      	bls.n	80048d0 <__utoa+0x3c>
 80048c6:	7019      	strb	r1, [r3, #0]
 80048c8:	460b      	mov	r3, r1
 80048ca:	4618      	mov	r0, r3
 80048cc:	b00b      	add	sp, #44	; 0x2c
 80048ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d0:	1e58      	subs	r0, r3, #1
 80048d2:	4684      	mov	ip, r0
 80048d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80048d8:	fb02 5617 	mls	r6, r2, r7, r5
 80048dc:	3628      	adds	r6, #40	; 0x28
 80048de:	446e      	add	r6, sp
 80048e0:	460c      	mov	r4, r1
 80048e2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80048e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80048ea:	462e      	mov	r6, r5
 80048ec:	42b2      	cmp	r2, r6
 80048ee:	f101 0101 	add.w	r1, r1, #1
 80048f2:	463d      	mov	r5, r7
 80048f4:	d9ee      	bls.n	80048d4 <__utoa+0x40>
 80048f6:	2200      	movs	r2, #0
 80048f8:	545a      	strb	r2, [r3, r1]
 80048fa:	1919      	adds	r1, r3, r4
 80048fc:	1aa5      	subs	r5, r4, r2
 80048fe:	42aa      	cmp	r2, r5
 8004900:	dae3      	bge.n	80048ca <__utoa+0x36>
 8004902:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004906:	780e      	ldrb	r6, [r1, #0]
 8004908:	7006      	strb	r6, [r0, #0]
 800490a:	3201      	adds	r2, #1
 800490c:	f801 5901 	strb.w	r5, [r1], #-1
 8004910:	e7f4      	b.n	80048fc <__utoa+0x68>
 8004912:	bf00      	nop
 8004914:	080056d4 	.word	0x080056d4

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
